<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by the CapeClear Studio XSLT Mapper --><!-- Source File: .\AccessAFB.xsd --><!-- Source Definition: Request --><!-- Source Element: APPLICATION --><!-- Source Binding:  --><!-- Result File: ..\..\..\..\..\..\..\..\Eclipse\eclipse\CWWStaging.xsd --><!-- Interceptor XPath: /cc2:APPLICATION --><xsl:stylesheet xmlns:xsd="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xsl" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:lxslt="http://xml.apache.org/xslt">
    <xsl:output indent="no" method="xml"/>
    <xsl:strip-space elements="*"/>
    <xsl:param name="SOURCE_FILENAME"/>
    <xsl:variable name="lcletters">abcdefghijklmnopqrstuvwxyz</xsl:variable>
	<xsl:variable name="ucletters">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable>
	<xsl:variable name="appStatusPending"><xsl:value-of select="'PE'"/></xsl:variable>
	<xsl:variable name="defaultAmount"><xsl:value-of select="'0.00'"/></xsl:variable>
	<xsl:variable name="defaultAmountIndicator"><xsl:value-of select="'1'"/></xsl:variable>
	<xsl:variable name="defaultSeqNum"><xsl:value-of select="'0'"/></xsl:variable>
	<xsl:variable name="defaultQuantity"><xsl:value-of select="'0'"/></xsl:variable>
	<xsl:variable name="defaultSpace"><xsl:value-of select="' '"/></xsl:variable>
	<xsl:variable name="defaultHighdate"><xsl:value-of select="'9999-12-31'"/></xsl:variable>
	<xsl:variable name="defaultLowDate"><xsl:value-of select="'0001-01-01'"/></xsl:variable>
			
    <xsl:template name='convertToUppercase'>
	    <xsl:param name='toConvert' />
	    <xsl:value-of select="translate($toConvert,$lcletters,$ucletters)" />
	</xsl:template>
    
    <xsl:template name='convertAccessIndToCwwInd'>
	    <xsl:param name='toConvert'/>
	    <xsl:choose>
	        <xsl:when test="$toConvert = '0'">
	            <xsl:value-of select="1"/>
	        </xsl:when>
	        <xsl:when test="$toConvert = '1'">
	            <xsl:value-of select="2"/>
	        </xsl:when>
	        <xsl:when test="$toConvert = '2'">
	            <xsl:value-of select="2"/>
	        </xsl:when>
            <xsl:otherwise> 
            	<xsl:value-of select="2"/>
            </xsl:otherwise>
	     </xsl:choose>
	</xsl:template>
	 <xsl:template name='convertAccessPastCvrgCodeToCwwPastCvrgCode'>
	    <xsl:param name='toConvert'/>
	    <xsl:choose>
	        <xsl:when test="$toConvert = 'LO'">
	            <xsl:value-of select="'LE'"/>
	        </xsl:when>
	        <xsl:when test="$toConvert = 'HC'">
	            <xsl:value-of select="'RT'"/>
	        </xsl:when>
	        <xsl:when test="$toConvert = 'ST'">
	            <xsl:value-of select="'DH'"/>
	        </xsl:when>
	        <xsl:when test="$toConvert = 'IE'">
	            <xsl:value-of select="'LC'"/>
	        </xsl:when>
	        <xsl:when test="$toConvert = 'CE'">
	            <xsl:value-of select="'CO'"/>
	        </xsl:when>
	         <xsl:when test="$toConvert = 'OT'">
	            <xsl:value-of select="'OT'"/>
	        </xsl:when>
            <xsl:otherwise> 
            	<xsl:value-of select="' '"/>
            </xsl:otherwise>
	     </xsl:choose>
	</xsl:template>
    <xsl:template match="/APPLICATION">
        <APPLICATION>
            <APP_NUM>
                <xsl:value-of select="APP_NUM"/>
            </APP_NUM>
            <APP_STAT_CD>
            	<xsl:choose>
	            	<xsl:when test="string(APP_STAT_CD) = 'PE'">
                		<xsl:value-of select="'UR'"/>
                	</xsl:when>
	            	<xsl:when test="string(APP_STAT_CD) = 'CA'">
                		<xsl:value-of select="'UR'"/>
                	</xsl:when>
                	<xsl:when test="string(APP_STAT_CD) = 'RE'">
                		<xsl:value-of select="'UN'"/>
                	</xsl:when>
	            	<xsl:when test="string(APP_STAT_CD) = 'DS'">
                		<xsl:value-of select="'DS'"/>
                	</xsl:when>
                	<xsl:when test="string(APP_STAT_CD) = 'WA'">
                		<xsl:value-of select="'AB'"/>
                	</xsl:when>
                	<xsl:otherwise>
	                	<xsl:value-of select="'UN'"/>
                	</xsl:otherwise>
                </xsl:choose>
            </APP_STAT_CD>
            <APP_TMS>
                <xsl:value-of select="' '"/><!-- JAVA - Default to current DB2 Timestamp -->
            </APP_TMS>
			<APP_CPLT_TMS>
           		<xsl:value-of select="APP_CPLT_TMS"/>
            </APP_CPLT_TMS>
            <APP_TYP>
	            <xsl:choose>
	            	<xsl:when test="HSHL_INDV_CT = 0">
                		<xsl:value-of select="'P'"/>
                	</xsl:when>
                	<xsl:otherwise>
	                	<xsl:value-of select="'A'"/>
                	</xsl:otherwise>
                </xsl:choose>
            </APP_TYP>
            <RES_CNTY_NUM>
                <xsl:choose>
                	<xsl:when test="string(CNTY_NUM)">
	        	    	<xsl:value-of select="CNTY_NUM"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>0</xsl:otherwise>
	     		</xsl:choose>
            </RES_CNTY_NUM>
            <DABL_STAT_SW>
                <xsl:choose>
	        	    <xsl:when test="string(INDIVIDUALS/INDIVIDUAL/INDIVIDUAL_PROFILE/DABL_STAT_SW)">
	        	    	<xsl:value-of select="INDIVIDUALS/INDIVIDUAL/INDIVIDUAL_PROFILE/DABL_STAT_SW"/>
	        	    </xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>
            </DABL_STAT_SW>
		    <EMER_MA_RESP>
                <xsl:choose>
        	        <xsl:when test="string(EMER_MA_RESP)">
        	        	<xsl:value-of select="EMER_MA_RESP"/>
        	        </xsl:when>
    	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
 		    	</xsl:choose>
 		    	<!-- JAVA - If status of ABBNR is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
            </EMER_MA_RESP>
            <APP_INTERACTION_DETAILS DATA_EXIST="{APP_INTERACTION_DETAILS/@DATA_EXIST}">
	              <IACT_IND>
	      	        	<xsl:value-of select="APP_INTERACTION_DETAILS/IACT_IND"/> 		    	 
	              </IACT_IND>
	              <SIGN_DT>
	        	    <xsl:value-of select="APP_INTERACTION_DETAILS/SIGN_DT"/> 		        
	              </SIGN_DT>   
	              <ECF_STAT_CD>
	        	    <xsl:value-of select="'PE'"/> 		        
	              </ECF_STAT_CD>                
	               <REC_DRTN_TM>
	        	    <xsl:value-of select="0"/> 		        
	              </REC_DRTN_TM> 
	               <REC_FILE_NAM>
	        	    <xsl:value-of select="' '"/> 		        
	              </REC_FILE_NAM>                                    	
            </APP_INTERACTION_DETAILS>
            <!-- MAGI 60762 -->
           <HOUSEHOLD_TAXFILING_STATUS DATA_EXIST="{HOUSEHOLD_TAXFILING_STATUS/@DATA_EXIST}">
	              <APP_NUM>
	      	        	<xsl:value-of select="HOUSEHOLD_TAXFILING_STATUS/APP_NUM"/> 		    	 
	              </APP_NUM>
	              <EFF_BEG_MO>
	        	    <xsl:value-of select="HOUSEHOLD_TAXFILING_STATUS/EFF_BEG_MO"/> 		        
	              </EFF_BEG_MO>  
	              <TAX_FILR_CD>
	              <xsl:choose>
        	        <xsl:when test="string(HOUSEHOLD_TAXFILING_STATUS/TAX_FILR_CD)">
        	        	<xsl:value-of select="HOUSEHOLD_TAXFILING_STATUS/TAX_FILR_CD"/>
        	        </xsl:when>
    	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
 		    	</xsl:choose>    
	              </TAX_FILR_CD> 	               
            </HOUSEHOLD_TAXFILING_STATUS>           
            <TB_RESP>
                <xsl:choose>
        	        <xsl:when test="string(TB_RESP)">
        	        	<xsl:value-of select="TB_RESP"/>
        	        </xsl:when>
    	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
 		    	</xsl:choose>
 		    	<!-- JAVA - If status of ABBNR is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
            </TB_RESP>
            
            <!-- JAVA - If 'N', loop through individuals in APP_INDV and if the age of any of the individuals is >= 60, populate 'Y', if status of ABHHQ is not 'C', populate as ' '. -->
            <HSHL_ZIP_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_ZIP_ADR' />
                </xsl:call-template>
            </HSHL_ZIP_ADR>
            <LANG_CD>
                  <xsl:choose>
	        	    <xsl:when test="string(LANG_CD)">
	        	    	<xsl:value-of select="LANG_CD"/>
	        	    </xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>
            </LANG_CD>
            <OFC_NUM>
                <xsl:value-of select="'0'"/>
            </OFC_NUM>
            <PRIR_SRVC_ELG_SW>
	            <xsl:choose><!-- If PRIR_REC_CPLT_IND is 1 populate 'Y' else 'N'-->
	        	    <xsl:when test="PRIR_REC_CPLT_IND = 1">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </PRIR_SRVC_ELG_SW>            
            <SRC_APP_NUM>
                <xsl:value-of select="APP_NUM"/>
            </SRC_APP_NUM>
            <UPDATED_DT>
                <xsl:value-of select="' '"/><!-- JAVA - Default to current date -->
            </UPDATED_DT>
            <APP_CNFD_SW>
                <xsl:value-of select="' '"/>
            </APP_CNFD_SW>
            <APP_RCV_DT>
                <xsl:value-of select="' '"/><!-- JAVA - Default to current date -->
            </APP_RCV_DT>
            <WRKR_ID>
	        	<xsl:choose>
	        		<xsl:when test="APP_STAT_CD = 'PE' or  APP_STAT_CD = 'DS' or APP_STAT_CD = 'AB' or string(APP_STAT_CD) = 'CA' or string(APP_STAT_CD) = 'WA' and string(WRKR_ID)">
	        	    	<xsl:value-of select="WRKR_ID"/>
	        	    </xsl:when>
	        	    <xsl:when test="APP_MTHD_IND = 'P' or APP_MTHD_IND = 'M' and string(WRKR_ID)">
		        	    <xsl:value-of select="WRKR_ID"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	                	<xsl:value-of select="' '"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>            
            </WRKR_ID>
            <CASE_NUM>
                <xsl:value-of select="'0'"/>
            </CASE_NUM>
            <RFA_NUM>
                <xsl:value-of select="'0'"/>
            </RFA_NUM>
            <CNSS_TRCT_NUM>
                <xsl:value-of select="'0'"/>
            </CNSS_TRCT_NUM>
            <FPW_FILE_DT>
                <xsl:value-of select="' '"/>
                <!-- JAVA - If FPW_RQST_SW is 'Y', then if the date of APP_TMS is less than or equal to the current date and the time is less than 4:30 pm of the current date, set the date to the current date else set date to next business day. If FPW_RQST_SW is 'N', set to High Date.-->
            </FPW_FILE_DT>
            <FPW_RQST_SW>
            	<xsl:choose><!-- If FPW_RQST_IND is 1 populate 'Y' else 'N'-->
	        	    <xsl:when test="FPW_RQST_IND = 1">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </FPW_RQST_SW>
            <FS_FILE_DT>
                <xsl:value-of select="' '"/>
                <!-- JAVA - If FS_RQST_SW is 'Y', then if the date of APP_TMS is less than or equal to the current date and the time is less than 4:30 pm of the current date, set the date to the current date else set date to next business day. If FS_RQST_SW is 'N', set to High Date.-->
            </FS_FILE_DT>
            <FS_RQST_SW>
            	<xsl:choose><!-- If FS_RQST_IND is 1 populate 'Y' else 'N'-->
	        	    <xsl:when test="FS_RQST_IND = 1">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </FS_RQST_SW>
            <CC_RQST_SW>
            	<xsl:choose><!-- If CC_RQST_IND is 1 populate 'Y' else 'N'-->
	        	    <xsl:when test="CC_RQST_IND = 1">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </CC_RQST_SW>
            <MPA_RQST_RESP>
	           	<xsl:choose><!-- If MPA_RQST_IND is 1 populate 'Y' else 'N'-->
	        	    <xsl:when test="MPA_RQST_IND = 1">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>            
            </MPA_RQST_RESP>
            <MPA_FILE_DT>
                <xsl:value-of select="' '"/>
                <!-- JAVA - If MPA_RQST_SW is 'Y', then if the date of APP_TMS is less than or equal to the current date and the time is less than 4:30 pm of the current date, set the date to the current date else set date to next business day. If FS_RQST_SW is 'N', set to High Date.-->
            </MPA_FILE_DT>
            <EBD_MEDCD_RQST_SW>
            	<xsl:choose><!-- If EBD_RQST_IND is 1 populate 'Y' else 'N'-->
	        	    <xsl:when test="EBD_RQST_IND = 1">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </EBD_MEDCD_RQST_SW>
            <BCP_FAM_RQST_SW>
            	<xsl:choose><!-- If HC_RQST_IND is 1 populate 'Y' else 'N'-->
	        	    <xsl:when test="HC_RQST_IND = 1">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </BCP_FAM_RQST_SW>
            <BCP_CLA_RQST_SW>
                		<xsl:value-of select="BCP_CLA_RQST_SW_APP"/>
	        </BCP_CLA_RQST_SW>
		    <!-- Constants : Make sure if you change these -->
		    <xsl:variable name="APP_CLA_REQ_IND">
				<xsl:choose><!-- If CLA_RQST_IND is 1 populate 'Y' else 'N'-->
		       	    <xsl:when test="CP_WLST_STAT_CD != 'OW' and CLA_RQST_IND = 1">
    		   	    	<xsl:value-of select="'Y'" />
        		    </xsl:when>
        		    <xsl:when test="CP_WLST_STAT_CD = 'OW' and CLA_RQST_IND = 1">
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
				</xsl:choose>        		    
			</xsl:variable>
   			<xsl:variable name="APP_FMA_REQ_IND">
				<xsl:choose><!-- If FMA_RQST_IND is 1 populate 'Y' else 'N'-->
		       	    <xsl:when test="FMA_RQST_IND = '1'">
    		   	    	<xsl:value-of select="'Y'" />
        		    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
				</xsl:choose>        		    
			</xsl:variable>
		    <!-- Constants : Make sure if you change above -->
            <INST_MA_RQST_SW>
            	<xsl:choose>
	        	    <xsl:when test="string(INST_MA_RQST_SW)"><xsl:value-of select="INST_MA_RQST_SW"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="'N'"/></xsl:otherwise>
	     		</xsl:choose>   
            </INST_MA_RQST_SW>
            
            <HLESS_SW>
                  <xsl:choose>
	        	    <xsl:when test="string(HLESS_SW)"><xsl:value-of select="HLESS_SW"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>                
            </HLESS_SW>
            <HSHL_APT_ADR>
                <xsl:value-of select="' '"/>
            </HSHL_APT_ADR>
            <HSHL_CITY_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_CITY_ADR' />
                </xsl:call-template>
            </HSHL_CITY_ADR>
            <HSHL_DIR_ADR>
                <xsl:value-of select="' '"/>
            </HSHL_DIR_ADR>
            <HSHL_NUM_ADR>
                <xsl:value-of select="' '"/>
            </HSHL_NUM_ADR>
            <HSHL_PHN_NUM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_HOME_PHN_NUM' />
                </xsl:call-template>
            </HSHL_PHN_NUM>
            <HSHL_SFX_ADR>
                <xsl:value-of select="' '"/>
            </HSHL_SFX_ADR>
            <HSHL_ST_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_L1_ADR' />
                </xsl:call-template>            
            </HSHL_ST_ADR>
            <HSHL_STA_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_STA_ADR' />
                </xsl:call-template>               
            </HSHL_STA_ADR>
            <HSHL_UNIT_ADR>
                <xsl:value-of select="' '"/>
            </HSHL_UNIT_ADR>
            <HSHL_ZIP_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_ZIP_ADR' />
                </xsl:call-template>            
            </HSHL_ZIP_ADR>
            <HSHL_L2_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_L2_ADR' />
                </xsl:call-template>             
            </HSHL_L2_ADR>
            <HSHL_SFX_DIR_ADR>
                <xsl:value-of select="' '"/>
            </HSHL_SFX_DIR_ADR>
			<!-- START alternative address -->    
			<ADD_REC_IND>    
   				<xsl:value-of select="'R'"/>    
			</ADD_REC_IND>
            <APT_ADR>
                <xsl:value-of select="' '"/>
            </APT_ADR>
            <CITY_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='ALT_CITY_ADR' />
                </xsl:call-template>
            </CITY_ADR>
            <DIR_ADR>
                <xsl:value-of select="' '"/>
            </DIR_ADR>
            <NUM_ADR>
                <xsl:value-of select="' '"/>
            </NUM_ADR>
            <SFX_ADR>
                <xsl:value-of select="' '"/>
            </SFX_ADR>
            <ST_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='ALT_ST_ADR' />
                </xsl:call-template>            
            </ST_ADR>
            <STA_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='ALT_STA_ADR' />
                </xsl:call-template>               
            </STA_ADR>
            <UNIT_ADR>
                <xsl:value-of select="' '"/>
            </UNIT_ADR>
            <L2_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='ALT_L2_ADR' />
                </xsl:call-template>             
            </L2_ADR>
            <SFX_DIR_ADR>
                <xsl:value-of select="' '"/>
            </SFX_DIR_ADR>
            <ZIP_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='ALT_ZIP_ADR' />
                </xsl:call-template>            
            </ZIP_ADR>
            <!-- END alternative address -->
            <PHN_NUM_TYP>
            	<xsl:choose>
	        	    <xsl:when test="PHN_NUM_TYP = 'N'">
	        	    	<xsl:value-of select="' '"/>
	        	    </xsl:when>
	        	    <xsl:when test="string(PHN_NUM_TYP)">
	        	    	<xsl:value-of select="PHN_NUM_TYP"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="' '"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </PHN_NUM_TYP>
            <IP_FST_NAM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='FST_NAM' />
                </xsl:call-template>             
            </IP_FST_NAM>
            <IP_LAST_NAM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='LAST_NAM' />
                </xsl:call-template>             
            </IP_LAST_NAM>
            <IP_MID_INIT>
				<xsl:choose>
	        	    <xsl:when test="string(MID_INIT)"><xsl:value-of select="translate(MID_INIT,$lcletters,$ucletters)"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>
            </IP_MID_INIT>
            <IP_RES_SW>
                <xsl:value-of select="'Y'"/>
            </IP_RES_SW>
            <IP_RLT_CD>
                <xsl:value-of select="' '"/>
            </IP_RLT_CD>
            <IP_SFX_NAM>
                <xsl:value-of select="' '"/>
            </IP_SFX_NAM>
            <IP_CARE_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="CARE_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_CARE_EXMP_IND>
            <IP_EDB_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="EDB_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_EDB_EXMP_IND>
            <IP_TRNSP_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="TRNSP_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_TRNSP_EXMP_IND>
            <IP_WORK_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="WORK_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_WORK_EXMP_IND>
            <IP_WTHR_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="WTHR_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_WTHR_EXMP_IND>
            <IP_BUS_HR_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="BUS_HR_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_BUS_HR_EXMP_IND>
            <PAPRLESS_IND>
          		<xsl:choose>
 	    			<xsl:when test="PAPRLESS_IND = 'Y'">
 	    					<xsl:value-of select="'Y'"/>
 	    			</xsl:when>
 	    			<xsl:when test="PAPRLESS_IND = 'N'">
 	    					<xsl:value-of select="'N'"/>
 	    			</xsl:when>
 	    			<xsl:otherwise>
 	    				<xsl:value-of select="' '"/>
 	    			</xsl:otherwise>
				</xsl:choose>
             </PAPRLESS_IND>
            <IP_CC_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="CC_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_CC_EXMP_IND>
            <IP_ILNS_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="ILNS_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_ILNS_EXMP_IND>
            <IP_OTHR_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="OTHR_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_OTHR_EXMP_IND>
            <IP_UCMFT_EXMP_IND>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="UCMFT_EXMP_IND"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="0"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_UCMFT_EXMP_IND>
            <IP_OTHR_RSN_TXT>
	            <xsl:choose>
	        		<xsl:when test="FS_IVW_RESP = 'P' or FS_IVW_RESP = '0'">
            			<xsl:value-of select="OTHR_RSN_TXT"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="' '"/>
            		</xsl:otherwise>
        	    </xsl:choose>	
            </IP_OTHR_RSN_TXT>
            
            <MA_FILE_DT>
                <xsl:value-of select="' '"/>
                <!-- JAVA - If MA_RQST_SW is 'Y', then if the date of APP_TMS is less than or equal to the current date and the time is less than 4:30 pm of the current date, set the date to the current date else set date to next business day. If MA_RQST_SW is 'N', set to High Date.-->
            </MA_FILE_DT>
            <APP_FILE_DT>
                <xsl:value-of select="' '"/>
                <!-- JAVA - The earliest date of MA_FILE_DT, FPW_FILE_DT and FS_FILE_DT in T1002.-->
            </APP_FILE_DT>
            
            <HOME_ADR_VRFY_IND>
				<xsl:value-of select="HOME_ADR_VRFY_IND"/>
			</HOME_ADR_VRFY_IND>
			<MAIL_ADR_VRFY_IND>
				<xsl:value-of select="MAIL_ADR_VRFY_IND"/>
			</MAIL_ADR_VRFY_IND>           
            
            <HOME_FINALIST_ADDRESS DATA_EXIST="{HOME_FINALIST_ADDRESS/DATA_EXIST}">
				<HOME_ADR_TYP_IND>
					<xsl:value-of select="HOME_ADR_TYP_IND"/>
				</HOME_ADR_TYP_IND>  
				<HOME_ST_NUM_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_ST_NUM_ADR' />
					</xsl:call-template>            
				</HOME_ST_NUM_ADR>  
				<HOME_DIR_ADR>
					<xsl:value-of select="HOME_DIR_ADR"/>
				</HOME_DIR_ADR>   
				<HOME_ST_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_ST_ADR' />
					</xsl:call-template>            
				</HOME_ST_ADR> 
				<HOME_ST_SFX_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_ST_SFX_ADR' />
					</xsl:call-template>            
				</HOME_ST_SFX_ADR>   
				<HOME_SFX_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_SFX_ADR' />
					</xsl:call-template>            
				</HOME_SFX_ADR>   
				<HOME_APT_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_APT_ADR' />
					</xsl:call-template>            
				</HOME_APT_ADR>     
				 <HOME_UNIT_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_UNIT_ADR' />
					</xsl:call-template>            
				</HOME_UNIT_ADR>      
				 <HOME_L2_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_L2_ADR' />
					</xsl:call-template>            
				</HOME_L2_ADR> 
				<HOME_CITY_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_CITY_ADR' />
					</xsl:call-template>
				</HOME_CITY_ADR> 
				<HOME_ZIP_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_ZIP_ADR' />
					</xsl:call-template>
				</HOME_ZIP_ADR>
				<HOME_STATE_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='HOME_STATE_ADR' />
					</xsl:call-template>
				</HOME_STATE_ADR>
            </HOME_FINALIST_ADDRESS>
            
            <MAIL_FINALIST_ADDRESS DATA_EXIST="{MAIL_FINALIST_ADDRESS/DATA_EXIST}">
				<MAIL_ADR_TYP_IND>
					<xsl:value-of select="MAIL_ADR_TYP_IND"/>
				</MAIL_ADR_TYP_IND>  
				<MAIL_ST_NUM_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_ST_NUM_ADR' />
					</xsl:call-template>            
				</MAIL_ST_NUM_ADR>  
				<MAIL_DIR_ADR>
					<xsl:value-of select="MAIL_DIR_ADR"/>
				</MAIL_DIR_ADR>   
				<MAIL_ST_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_ST_ADR' />
					</xsl:call-template>            
				</MAIL_ST_ADR> 
				<MAIL_ST_SFX_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_ST_SFX_ADR' />
					</xsl:call-template>            
				</MAIL_ST_SFX_ADR>   
				<MAIL_SFX_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_SFX_ADR' />
					</xsl:call-template>            
				</MAIL_SFX_ADR>   
				<MAIL_APT_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_APT_ADR' />
					</xsl:call-template>            
				</MAIL_APT_ADR>     
				 <MAIL_UNIT_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_UNIT_ADR' />
					</xsl:call-template>            
				</MAIL_UNIT_ADR>      
				 <MAIL_L2_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_L2_ADR' />
					</xsl:call-template>            
				</MAIL_L2_ADR> 
				<MAIL_CITY_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_CITY_ADR' />
					</xsl:call-template>
				</MAIL_CITY_ADR> 
				<MAIL_ZIP_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_ZIP_ADR' />
					</xsl:call-template>
				</MAIL_ZIP_ADR>
				<MAIL_STATE_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='MAIL_STATE_ADR' />
					</xsl:call-template>
				</MAIL_STATE_ADR>
            </MAIL_FINALIST_ADDRESS>
            
            <AUTH_FINALIST_ADDRESS DATA_EXIST="{AUTH_FINALIST_ADDRESS/DATA_EXIST}">
				<AUTH_ADR_TYP_IND>
					<xsl:value-of select="AUTH_ADR_TYP_IND"/>
				</AUTH_ADR_TYP_IND>  
				<AUTH_ST_NUM_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_ST_NUM_ADR' />
					</xsl:call-template>            
				</AUTH_ST_NUM_ADR>  
				<AUTH_DIR_ADR>
					<xsl:value-of select="AUTH_DIR_ADR"/>
				</AUTH_DIR_ADR>   
				<AUTH_ST_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_ST_ADR' />
					</xsl:call-template>            
				</AUTH_ST_ADR> 
				<AUTH_ST_SFX_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_ST_SFX_ADR' />
					</xsl:call-template>            
				</AUTH_ST_SFX_ADR>   
				<AUTH_SFX_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_SFX_ADR' />
					</xsl:call-template>            
				</AUTH_SFX_ADR>   
				<AUTH_APT_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_APT_ADR' />
					</xsl:call-template>            
				</AUTH_APT_ADR>     
				 <AUTH_UNIT_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_UNIT_ADR' />
					</xsl:call-template>            
				</AUTH_UNIT_ADR>      
				 <AUTH_L2_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_L2_ADR' />
					</xsl:call-template>            
				</AUTH_L2_ADR> 
				<AUTH_CITY_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_CITY_ADR' />
					</xsl:call-template>
				</AUTH_CITY_ADR> 
				<AUTH_ZIP_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_ZIP_ADR' />
					</xsl:call-template>
				</AUTH_ZIP_ADR>
				<AUTH_STATE_ADR>
					<xsl:call-template name='convertToUppercase'>
						<xsl:with-param name='toConvert' select='AUTH_STATE_ADR' />
					</xsl:call-template>
				</AUTH_STATE_ADR>
            </AUTH_FINALIST_ADDRESS>
			
			
			
			
            <MA_RQST_SW>
            	<xsl:choose><!-- If FMA_RQST_IND is 1 populate 'Y' else 'N'-->
	        	   	<xsl:when test="FMA_RQST_IND = '1' and CP_WLST_STAT_CD = 'OW' and CLA_RQST_IND = '1' and HC_RQST_IND = '0' and EBD_RQST_IND = '0'">
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:when>
            		<xsl:when test="FMA_RQST_IND = '1'">
	        	    	<xsl:value-of select="'Y'"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
	        	    	<xsl:value-of select="'N'"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </MA_RQST_SW>
            <ONLN_SCRNR_RESP>
                <xsl:value-of select="' '"/>
            </ONLN_SCRNR_RESP>
            <RGN_NUM>
                <xsl:value-of select="'0'"/>
            </RGN_NUM>
            <RTRO_MA_RESP>
	            <xsl:choose>
                    <xsl:when test="MA_BACKDT_MO_1_IND = 1">
                        <xsl:value-of select="'3'"/>
                    </xsl:when>
                    <xsl:when test="MA_BACKDT_MO_2_IND = 1">
                        <xsl:value-of select="'2'"/>
                    </xsl:when>
                    <xsl:when test="MA_BACKDT_MO_3_IND = 1">
                        <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:otherwise> <xsl:value-of select="'0'"/></xsl:otherwise>
                </xsl:choose>
                <!-- JAVA - If MA_BACKDT_MO_1_IND is '1', populate '3'  else If MA_BACKDT_MO_2_IND is '1' populate '2', else if MA_BACKDT_MO_3_IND is '1', populate '1', else populate '0'. -->
            </RTRO_MA_RESP>
             <RTRO_FPW_RESP>
	            <xsl:choose>
                    <xsl:when test="FPW_BCKDT_MO_1_IND = 1">
                        <xsl:value-of select="'3'"/>
                    </xsl:when>
                    <xsl:when test="FPW_BCKDT_MO_2_IND = 1">
                        <xsl:value-of select="'2'"/>
                    </xsl:when>
                    <xsl:when test="FPW_BCKDT_MO_3_IND = 1">
                        <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:otherwise> <xsl:value-of select="'0'"/></xsl:otherwise>
                </xsl:choose>
                <!-- JAVA - If MA_BACKDT_MO_1_IND is '1', populate '3'  else If MA_BACKDT_MO_2_IND is '1' populate '2', else if MA_BACKDT_MO_3_IND is '1', populate '1', else populate '0'. -->
            </RTRO_FPW_RESP>
            
            <APP_STRT_DT>
           		<xsl:value-of select="APP_STRT_DT" />
            </APP_STRT_DT>
            <APP_MTHD_IND>
		    	<xsl:choose>
		        	<xsl:when test="string(APP_MTHD_IND)">
	            		<xsl:value-of select="APP_MTHD_IND" />
                    </xsl:when>
                    <xsl:otherwise> <xsl:value-of select="' '"/></xsl:otherwise>
                </xsl:choose>
            </APP_MTHD_IND>
            <OWNR_IND>
		    	<xsl:choose>
		        	<xsl:when test="string(APP_STAT_CD) = 'PE' or string(APP_STAT_CD) = 'DS' or string(APP_STAT_CD) = 'AB' or string(APP_STAT_CD) = 'CA' or string(APP_STAT_CD) = 'WA' and string(APP_OWNR_IND)">
	            		<xsl:value-of select="APP_OWNR_IND" />
                    </xsl:when>
                    <xsl:otherwise> <xsl:value-of select="' '"/></xsl:otherwise>
                </xsl:choose>
            </OWNR_IND>
            <!--
            PCR 44188 
            Passing APP_OWN_IND & OTHER_PGMS_REQUESTED to CARES to revert the APP_STAT_CD in table T1001 
            -->
            <APP_OWNR_IND>
            		<xsl:value-of select="APP_OWNR_IND" />
            </APP_OWNR_IND>
            <OTHER_PGMS_REQUESTED>
				<xsl:value-of select="POPULATE_TRANSFORMATION_DETAILS/OTHER_PGMS_REQUESTED" />
            </OTHER_PGMS_REQUESTED>
            <ECF_STAT_CD>
            	<xsl:value-of select="$appStatusPending"/>
            </ECF_STAT_CD>
            <CNTY_NUM>
               <xsl:choose>
	        	    <xsl:when test="ESC_ROUTING_IND = 'Y' and APP_TYP = 'ESC'">
	        	    	<xsl:value-of select="'74'"/>
	        	    </xsl:when>
	        	    <xsl:when test="ESC_ROUTING_IND = 'Y' and string(APP_STAT_CD) = 'PE' or string(APP_STAT_CD) = 'DS' or string(APP_STAT_CD) = 'AB'">
	        	    	<xsl:value-of select="'74'"/>
	        	    </xsl:when>
	        	    <xsl:when test="string(TRB_NUM) and string(TRB_NUM) != '0'">
	        	    	<xsl:value-of select="TRB_NUM"/>
	        	    </xsl:when>
	        	    <xsl:when test="DIFF_ADMIN_CNTY_FLAG = 'Y' and string(DIFF_ADMIN_CNTY_NUM) != '0'">
	        	    	<xsl:value-of select="DIFF_ADMIN_CNTY_NUM"/>
	        	    </xsl:when>
	        	    <xsl:otherwise>
		        	    <xsl:value-of select="CNTY_NUM"/>
	        	    </xsl:otherwise>
	     		</xsl:choose>
            </CNTY_NUM>
            
            <YRLY_INCM_EXCD_CD>
				<xsl:choose>
           	    	<xsl:when test="string(YRLY_INCM_EXCD_CD)"><xsl:value-of select="YRLY_INCM_EXCD_CD"/></xsl:when>
       	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
   		    	</xsl:choose>        
			</YRLY_INCM_EXCD_CD>
			
            <CMT_TXT>
                <xsl:value-of select="' '"/>
            </CMT_TXT>
            <HSHL_CELL_PHN_NUM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_CELL_PHN_NUM' />
                </xsl:call-template>             
            </HSHL_CELL_PHN_NUM>
            <HSHL_EMAIL_ADR>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_EMAIL_ADR' />
                </xsl:call-template>             
            </HSHL_EMAIL_ADR>
            <HSHL_WORK_PHN_NUM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='HSHL_WORK_PHN_NUM' />
                </xsl:call-template>             
            </HSHL_WORK_PHN_NUM>
            <MSG_PHN_EXTN_NUM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='MSG_PHN_EXTN_NUM' />
                </xsl:call-template>             
            </MSG_PHN_EXTN_NUM>
            <MSG_PHN_NUM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='MSG_PHN_NUM' />
                </xsl:call-template>             
            </MSG_PHN_NUM>
            <PREF_CNTC_IND>
				<xsl:choose>
	        	    <xsl:when test="string(PREF_CNTC_IND)"><xsl:value-of select="PREF_CNTC_IND"/></xsl:when>
	        	    <xsl:otherwise>0</xsl:otherwise>
	     		</xsl:choose>                
            </PREF_CNTC_IND>
            <PREF_CNTC_TM_TXT>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='PREF_CNTC_TM_TXT' />
                </xsl:call-template>             
            </PREF_CNTC_TM_TXT>
            <APP_SRC_CD>
	            <xsl:choose>
	        		<xsl:when test="AGCY_NUM = '0'">
            			<xsl:value-of select="'LA'"/>
            		</xsl:when>	
            		<xsl:otherwise>
            	 		<xsl:value-of select="'AH'"/>
            		</xsl:otherwise>
    	       	</xsl:choose>	
            </APP_SRC_CD>
            <WORK_PHN_EXTN_NUM>
				<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='WORK_PHN_EXTN_NUM' />
                </xsl:call-template>             
            </WORK_PHN_EXTN_NUM>
            <INCM_STOP_SW>
                 <xsl:choose>
	        	    <xsl:when test="string(INCM_STOP_SW)"><xsl:value-of select="INCM_STOP_SW"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>
            </INCM_STOP_SW>
            <LQD_ASET_AMT>
				<xsl:choose>
	        	    <xsl:when test="string(LQD_ASET_AMT)"><xsl:value-of select="LQD_ASET_AMT"/></xsl:when>
	        	    <xsl:otherwise>0.00</xsl:otherwise>
	     		</xsl:choose>
            </LQD_ASET_AMT>
            <LQD_ASET_AMT_IND>
				<xsl:call-template name='convertAccessIndToCwwInd'>
                	<xsl:with-param name='toConvert' select='LQD_ASET_IND' />
                </xsl:call-template>
            </LQD_ASET_AMT_IND>
            <MIG_FARM_WRKR_SW>
            	<xsl:choose>
	        	    <xsl:when test="string(MIG_FARM_WRKR_SW)"><xsl:value-of select="MIG_FARM_WRKR_SW"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>
            </MIG_FARM_WRKR_SW>
            <MO_GR_INCM_AMT>
				<xsl:choose>
	        	    <xsl:when test="string(MO_GR_INCM_AMT)"><xsl:value-of select="MO_GR_INCM_AMT"/></xsl:when>
	        	    <xsl:otherwise>0.00</xsl:otherwise>
	     		</xsl:choose>            
            </MO_GR_INCM_AMT>
            <MO_GR_INCM_AMT_IND>
				<xsl:call-template name='convertAccessIndToCwwInd'>
                	<xsl:with-param name='toConvert' select='MO_GR_INCM_IND' />
                </xsl:call-template>
            </MO_GR_INCM_AMT_IND>
            <MO_RENT_MRTG_AMT>
				<xsl:choose>
	        	    <xsl:when test="string(MO_RENT_MRTG_AMT)"><xsl:value-of select="MO_RENT_MRTG_AMT"/></xsl:when>
	        	    <xsl:otherwise>0.00</xsl:otherwise>
	     		</xsl:choose>              
            </MO_RENT_MRTG_AMT>
            <MO_RENT_MRTG_A_IND>
				<xsl:call-template name='convertAccessIndToCwwInd'>
                	<xsl:with-param name='toConvert' select='MO_RENT_MRTG_IND' />
                </xsl:call-template>
            </MO_RENT_MRTG_A_IND>
            <MO_UTIL_AMT>
				<xsl:choose>
	        	    <xsl:when test="string(MO_UTIL_AMT)"><xsl:value-of select="MO_UTIL_AMT"/></xsl:when>
	        	    <xsl:otherwise>0.00</xsl:otherwise>
	     		</xsl:choose>              
            </MO_UTIL_AMT>
            <MO_UTIL_AMT_IND>
				<xsl:call-template name='convertAccessIndToCwwInd'>
                	<xsl:with-param name='toConvert' select='MO_UTIL_IND' />
                </xsl:call-template>
            </MO_UTIL_AMT_IND>
            <NEW_INCM_SW>
                 <xsl:choose>
	        	    <xsl:when test="string(NEW_INCM_SW)"><xsl:value-of select="NEW_INCM_SW"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>                
            </NEW_INCM_SW>
            <PRIR_SRVC_DTER_DT>
                <xsl:value-of select="' '"/>
                <!-- JAVA - Default to APP_FILE_DT in T1002-->
            </PRIR_SRVC_DTER_DT>
            <RCV_FS_CUR_MO_SW>
                 <xsl:choose>
	        	    <xsl:when test="string(RCV_FS_CUR_MO_SW)"><xsl:value-of select="RCV_FS_CUR_MO_SW"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>                
            </RCV_FS_CUR_MO_SW>
            <WMEN_CHLD_SHLT_SW>
                 <xsl:choose>
	        	    <xsl:when test="string(WMEN_CHLD_SHLT_SW)"><xsl:value-of select="WMEN_CHLD_SHLT_SW"/></xsl:when>
	        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
	     		</xsl:choose>                 
            </WMEN_CHLD_SHLT_SW>
            <HELP_INDICATOR>
                 <xsl:choose>
        	        <xsl:when test="string(HELP_INDICATOR)"><xsl:value-of select="HELP_INDICATOR"/></xsl:when>
    	        	<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
 		    	</xsl:choose>
            </HELP_INDICATOR>
            <AGCY_NUM>
                 <xsl:choose>
        	        <xsl:when test="string(AGCY_NUM)"><xsl:value-of select="AGCY_NUM"/></xsl:when>
    	        	<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
 		    	</xsl:choose>
            </AGCY_NUM>
    		<E_SIGN_IND>
                 <xsl:choose>
        	        <xsl:when test="string(E_SIGN_IND)"><xsl:value-of select="E_SIGN_IND"/></xsl:when>
    	        	<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
 		    	</xsl:choose>
    		</E_SIGN_IND>
    		<SPS_E_SIGN_IND>
                 <xsl:choose>
        	        <xsl:when test="string(SPS_E_SIGN_IND)"><xsl:value-of select="SPS_E_SIGN_IND"/></xsl:when>
    	        	<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
 		    	</xsl:choose>
    		</SPS_E_SIGN_IND>
            
            <!-- CLA WaitList Start-->
            <SRC_APP_IND>
            	<xsl:call-template name='convertToUppercase'>
                	<xsl:with-param name='toConvert' select='SRC_APP_IND' />
                </xsl:call-template>       
            </SRC_APP_IND>
            <WLST_ADD_DT>
           		<xsl:value-of select="APP_CPLT_DT" />
            </WLST_ADD_DT>
            <WLST_STAT_CD>
           		<xsl:value-of select="CP_WLST_STAT_CD" />
            </WLST_STAT_CD>
            <CHG_CRCMS_RESP>
				<xsl:choose>
           	   		<xsl:when test="string(CHG_CRCMS_RESP)"><xsl:value-of select="CHG_CRCMS_RESP"/></xsl:when>
       	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
   		    	</xsl:choose>
			</CHG_CRCMS_RESP>
			<RTE_ACCESS_MTHD_IND>
				<xsl:choose>
           	   		<xsl:when test="string(RTE_ACCESS_MTHD_IND)"><xsl:value-of select="RTE_ACCESS_MTHD_IND"/></xsl:when>
       	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
   		    	</xsl:choose>
			</RTE_ACCESS_MTHD_IND>
			<PGM_CD>
				<xsl:value-of select="'CLA'"/>
			</PGM_CD>
			<WORKER_ID>
				<xsl:value-of select="WRKR_ID"/>
            </WORKER_ID>
            
            
			<POPULATE_WAITLIST_INFORMATION>
				<xsl:value-of select="POPULATE_TRANSFORMATION_DETAILS/POPULATE_WAITLIST_INFORMATION" />
            </POPULATE_WAITLIST_INFORMATION>
			<POPULATE_INBOX_INFORMATION>
				<xsl:choose>
	            	<xsl:when test="string(APP_OWNR_IND) and APP_OWNR_IND = 'W' and POPULATE_TRANSFORMATION_DETAILS/POPULATE_INBOX_INFORMATION='0'">
	            		<xsl:value-of select="'1'"/>
	            	</xsl:when>
	       	        <xsl:otherwise>
	       	        	<xsl:value-of select="POPULATE_TRANSFORMATION_DETAILS/POPULATE_INBOX_INFORMATION"/>
	       	        </xsl:otherwise>
  		    	</xsl:choose>
            </POPULATE_INBOX_INFORMATION>
            
			<!-- CLA WaitList End-->
			
			
            <BCP_CLA_PLAN_DETAILS DATA_EXIST="{$APP_CLA_REQ_IND}">
           		<ADD_REC_IND>
                    <xsl:value-of select="'R'"/>
     		    </ADD_REC_IND>
                <EFF_BEG_MO>
                    <xsl:value-of select="' '"/>
                    <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                </EFF_BEG_MO>         
                <EXTD_DUE_DT_RSN_CD>
                	<xsl:value-of select="' '"/>
                </EXTD_DUE_DT_RSN_CD>
                <EXTD_FEE_DUE_DT>
                    <xsl:value-of select="' '" />
                </EXTD_FEE_DUE_DT>
                <!-- PCR 43100 -->
                <ITEM_TYP>
                    <xsl:value-of select="'A'" />
                </ITEM_TYP>                   
                <FEE_PAID_AMT>
                	<xsl:value-of select="'0.00'"/>
                </FEE_PAID_AMT>
                <FEE_RQR_MET_IND>
                    <xsl:choose>
	            	    <xsl:when test="string(HLESS_SW) and HLESS_SW = 'Y'">
	            	    	<xsl:value-of select="'W'"/>
	            	    </xsl:when>
	        	        <xsl:otherwise>
	        	        	<xsl:value-of select="'N'"/>
	        	        </xsl:otherwise>
	   		    	</xsl:choose>
                </FEE_RQR_MET_IND>
                <APP_FEE_AMT>
                    <xsl:choose>
	            	    <xsl:when test="string(HLESS_SW) and HLESS_SW = 'Y'">
		                    <xsl:value-of select="'0.00'"/>
	            	    </xsl:when>
	        	        <xsl:otherwise>
		                    <xsl:value-of select="'60.00'"/>
	        	        </xsl:otherwise>
	   		    	</xsl:choose>
                </APP_FEE_AMT>
                <FEE_WAIV_RSN_CD>
                    <xsl:choose>
	            	    <xsl:when test="string(HLESS_SW) and HLESS_SW = 'Y'">
	            	    	<xsl:value-of select="'HO'"/>
	            	    </xsl:when>
	        	        <xsl:otherwise>
	        	        	<xsl:value-of select="' '" />
	        	        </xsl:otherwise>
	   		    	</xsl:choose>
                </FEE_WAIV_RSN_CD>
                <FULL_FEE_PAID_DT>
                    <xsl:value-of select="' '" />
                </FULL_FEE_PAID_DT>
                <PROC_WO_FEE_RSN_CD>
                	<xsl:value-of select="' '"/>
                </PROC_WO_FEE_RSN_CD>
                <SRC_HC_ENRL_NUM>
                    <xsl:value-of select="HC_ENRL_NUM"/>
                </SRC_HC_ENRL_NUM>
            </BCP_CLA_PLAN_DETAILS>            
            
            <!-- Default HMO selection information -->
            
            <APP_HMO_SEL_DETAILS DATA_EXIST="{$APP_FMA_REQ_IND}">
       			<ADD_REC_IND>
                	<xsl:value-of select="'R'"/>
     		    </ADD_REC_IND>
            	<FEE_SRVC_RSN_CD>
	            	<xsl:value-of select="' '"/>
            	</FEE_SRVC_RSN_CD>
            	<HMO_ID>
            		<xsl:value-of select="'0'"/>
            	</HMO_ID>
                <HMO_SEL_DT>
            		<xsl:value-of select="$defaultLowDate"/>
                </HMO_SEL_DT>
                <HMO_SEL_EXMP_SW>
	            	<xsl:value-of select="' '"/>
                </HMO_SEL_EXMP_SW>
                <HMO_SEL_TYP>
	            	<xsl:value-of select="' '"/>
                </HMO_SEL_TYP>
                <SRC_HC_ENRL_NUM>
	                <xsl:value-of select="HC_ENRL_NUM"/>
                </SRC_HC_ENRL_NUM>
                <EFF_BEG_DT>
            		<xsl:value-of select="$defaultLowDate"/>
                </EFF_BEG_DT>
                <EFF_END_DT>
            		<xsl:value-of select="$defaultLowDate"/>
                </EFF_END_DT>
                <PGM_TYP>
	            	<xsl:value-of select="'FMA'"/>
                </PGM_TYP>
                <UPDT_IND>
	                <xsl:value-of select="' '"/>
                </UPDT_IND>
                <ENRL_EFF_DT>
            		<xsl:value-of select="$defaultLowDate"/>
                </ENRL_EFF_DT>
            </APP_HMO_SEL_DETAILS>            
            
            <!--  ECOW Transformation Changes Start -->
   			<xsl:variable name="APPLYING_ON_YOUR_BEHALF_DATA_EXIST">
				<xsl:choose>
		       	    <xsl:when test="string(HELP_INDICATOR) = 'AR' or  string(HELP_INDICATOR) = 'LG' or  string(HELP_INDICATOR) = 'PA'">
    		   	    	<xsl:value-of select="'Y'" />
        		    </xsl:when>
        	        <xsl:otherwise>
	        	        <xsl:value-of select="'N'"/>
        	        </xsl:otherwise>
				</xsl:choose>        		    
			</xsl:variable>
   			<xsl:variable name="AR_LG_PRFL_RESP_VAR">
				<xsl:choose>
		       	    <xsl:when test="string(HELP_INDICATOR) = 'AR'">
    		   	    	<xsl:value-of select="'AR'" />
        		    </xsl:when>
        		    <!-- If legal guardian or power of attorney set 'LG' -->
		       	    <xsl:when test="string(HELP_INDICATOR) = 'LG' or  string(HELP_INDICATOR) = 'PA'">
    		   	    	<xsl:value-of select="'LG'" />
        		    </xsl:when>
        	        <xsl:otherwise>
	        	        <xsl:value-of select="' '"/>
        	        </xsl:otherwise>
				</xsl:choose>        		    
			</xsl:variable>
			
		    <!-- Constants : Make sure if you change above -->
			<APP_AR_LG_DETAILS DATA_EXIST="{$APPLYING_ON_YOUR_BEHALF_DATA_EXIST}">
				<ADD_REC_IND>
					<xsl:value-of select="'R'"/>
				</ADD_REC_IND>
				<FST_NAM>
					<xsl:call-template name='convertToUppercase'>
	                	<xsl:with-param name='toConvert' select='APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/FST_NAM' />
	                </xsl:call-template>             
				</FST_NAM>
				<LAST_NAM>
					<xsl:call-template name='convertToUppercase'>
	                	<xsl:with-param name='toConvert' select='APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/LAST_NAM' />
	                </xsl:call-template>             
				</LAST_NAM>
				<MID_INIT>
					<xsl:choose>
		        	    <xsl:when test="string(APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/MID_INIT)">
		        	    	<xsl:value-of select="translate(APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/MID_INIT,$lcletters,$ucletters)"/></xsl:when>
		        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		</xsl:choose>
				</MID_INIT>
				<L1_ADR>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/L1_ADR" />
				</L1_ADR>
				<L2_ADR>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/L2_ADR" />
				</L2_ADR>
				<CITY_ADR>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/CITY_ADR" />
				</CITY_ADR>
				<STA_ADR>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/STA_ADR" />
				</STA_ADR>
				<ZIP_ADR>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/ZIP_ADR" />
				</ZIP_ADR>
				<EMAIL_ADR>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/EMAIL_ADR" />
				</EMAIL_ADR>
				<HELP_TYP>
	       			<xsl:value-of select="$AR_LG_PRFL_RESP_VAR"/>
    			</HELP_TYP>
				<LTR_LANG_CD>
					<xsl:choose>
		        	    <xsl:when test="string(APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/LTR_LANG_CD)">
		        	    	<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/LTR_LANG_CD"/></xsl:when>
		        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		</xsl:choose>
				</LTR_LANG_CD>
				<LTR_RCV_IND>
					<xsl:choose>
		        	    <xsl:when test="string(APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/LTR_RCV_IND)">
		        	    	<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/LTR_RCV_IND"/></xsl:when>
		        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		</xsl:choose>
				</LTR_RCV_IND>
				<ADR_VRFY_CD>
					<xsl:choose>
		        	    <xsl:when test="string(APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/ADR_VRFY_CD)">
		        	    	<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/ADR_VRFY_CD"/></xsl:when>
		        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		</xsl:choose>
				</ADR_VRFY_CD>
				<PHN_NUM>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/PHN_NUM" />
				</PHN_NUM>
				<PHN_EXTN_NUM>
					<xsl:value-of select="APPLYING_ON_YOUR_BEHALF_DETAIL/APPLYING_ON_YOUR_BEHALF/PHN_EXTN_NUM" />
				</PHN_EXTN_NUM>
			</APP_AR_LG_DETAILS>            
            <!--  ECOW Transformation Changes End -->
            <INDIVIDUALS DATA_EXIST="{INDIVIDUALS/@DATA_EXIST}">
                <xsl:for-each select="INDIVIDUALS/INDIVIDUAL">
                    <INDIVIDUAL DATA_EXIST="{INDIVIDUAL/@DATA_EXIST}">
                        <INDV_SEQ_NUM>
                            <xsl:value-of select="INDV_SEQ_NUM"/>
                        </INDV_SEQ_NUM>
                        <ALN_SPONSER_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(ALN_SPONSER_SW)"><xsl:value-of select="ALN_SPONSER_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </ALN_SPONSER_SW>
                        <BC_RQST_SW>
			            	<xsl:choose><!-- If BC_RQST_SW is 1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_FMA_RQST_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </BC_RQST_SW>
                        <BRTH_DT>
		                    <xsl:choose>
			            	    <xsl:when test="string(BRTH_DT)"><xsl:value-of select="BRTH_DT"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </BRTH_DT>
                        
                        <FPW_RQST_SW>
			            	<xsl:choose><!-- If INDV_FPW_RQST_IND is 1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_FPW_RQST_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </FPW_RQST_SW>
                        <FS_RQST_SW>
			            	<xsl:choose><!-- If INDV_FS_RQST_IND is 1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_FS_RQST_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </FS_RQST_SW>
                        <CC_RQST_SW>
			            	<xsl:choose><!-- If INDV_CC_RQST_IND is 1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_CC_RQST_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </CC_RQST_SW>
                         <SS_NUM_VFCN_CD>
	                        <xsl:value-of select="' '"/>
                        </SS_NUM_VFCN_CD>
                        <MPA_SW>
	                        <xsl:value-of select="'N'"/>
                        </MPA_SW>
                        <EBD_MEDCD_RQST_SW>
			            	<xsl:choose><!-- If INDV_EBD_RQST_IND is 1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_EBD_RQST_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </EBD_MEDCD_RQST_SW>
                        <BCP_FAM_RQST_SW>
			            	<xsl:choose><!-- If INDV_HC_RQST_IND is 1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_HC_RQST_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </BCP_FAM_RQST_SW>
                        <BCP_CLA_RQST_SW>
			            	<xsl:choose><!-- If INDV_CLA_RQST_IND is 1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/MAGI_CLA_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>				        	  
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </BCP_CLA_RQST_SW>
						<INST_MA_RQST_SW>
    		            	<xsl:choose><!-- If living arrangement type is in ('06','08','20','22') AND HC_RQST_IND=1 populate 'Y' else 'N'-->
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_HC_RQST_IND = '1' and string(INDIVIDUAL_PROFILE/LIVE_ARNG_TYP) = '06' or string(INDIVIDUAL_PROFILE/LIVE_ARNG_TYP) = '08' or string(INDIVIDUAL_PROFILE/LIVE_ARNG_TYP) = '20' or string(INDIVIDUAL_PROFILE/LIVE_ARNG_TYP) = '22'">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </INST_MA_RQST_SW>
                        <FST_NAM>
							<xsl:call-template name='convertToUppercase'>
			                	<xsl:with-param name='toConvert' select='FST_NAM' />
			                </xsl:call-template>             
                        </FST_NAM>
                        <INDV_ESTB_STAT_IND>
		        	    	<xsl:value-of select="'R'"/>
                        </INDV_ESTB_STAT_IND>
                        <RLVN_IND>
                        <xsl:choose>
                       	    <xsl:when test="RLVN_IND = 1">
			        	    	<xsl:value-of select="'R'"/>
			        	    </xsl:when>
			        	    <xsl:otherwise>
			        	    	<xsl:value-of select="'X'"/>
			        	    </xsl:otherwise>
			        	</xsl:choose>    
                        </RLVN_IND>
                        <LAST_NAM>
							<xsl:call-template name='convertToUppercase'>
			                	<xsl:with-param name='toConvert' select='LAST_NAM' />
			                </xsl:call-template>             
                        </LAST_NAM>
                        <SFX_NAM>
                            <xsl:value-of select="' '"/>
                        </SFX_NAM>
                        <MA_RQST_SW>
			            	<xsl:choose><!-- If INDV_FMA_RQST_IND is 1 populate 'Y' else 'N'-->				        	    
			            		<xsl:when test="INDIVIDUAL_PROFILE/INDV_FMA_RQST_IND = '1' and INDIVIDUAL_PROFILE/CP_WLST_RESP = 'Y' and INDIVIDUAL_PROFILE/INDV_CLA_RQST_IND = '1' and INDIVIDUAL_PROFILE/INDV_HC_RQST_IND = '0' and INDIVIDUAL_PROFILE/INDV_EBD_RQST_IND = '0'">
	        	    				<xsl:value-of select="'N'"/>
	        	    			</xsl:when>
				        	    <xsl:when test="INDIVIDUAL_PROFILE/INDV_FMA_RQST_IND = '1'">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </MA_RQST_SW>
                        <MID_INIT>
							<xsl:choose>
				        	    <xsl:when test="string(MID_INIT)"><xsl:value-of select="translate(MID_INIT,$lcletters,$ucletters)"/></xsl:when>
				        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
				     		</xsl:choose>                        
				     	</MID_INIT>
                        <PIN_NUM>
                            <xsl:value-of select="'0'"/>
                        </PIN_NUM>
                        <PRIM_PRSN_SW>
		                    <xsl:choose><!-- If PRIM_PRSN_SW is Y populate 'Y' else 'N'-->
				        	    <xsl:when test="PRIM_PRSN_SW = 'Y'">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:otherwise>
				     		</xsl:choose>
                        </PRIM_PRSN_SW>
                        <SEX_IND>
		                    <xsl:choose>
			            	    <xsl:when test="string(SEX_IND)"><xsl:value-of select="SEX_IND"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
		     		    </SEX_IND>
                        <SNDX_NUM>
                            <xsl:value-of select="' '"/>
                            <!-- JAVA - Generate the Soundex Number-->
                        </SNDX_NUM>
                        <SSN_NUM>
		                    <xsl:choose>
			            	    <xsl:when test="string(SSN_NUM)"><xsl:value-of select="SSN_NUM"/></xsl:when>
			        	        <xsl:otherwise>0</xsl:otherwise>
		     		    	</xsl:choose>                        
                        </SSN_NUM>
                        <AI_IND>
							<xsl:choose>
	                       	    <xsl:when test="AI_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:when test="AI_IND = 1 or ASIA_IND = 1 or BLK_IND = 1 or HSPC_IND = 1 or PAC_ISL_IND = 1 or WHT_IND = 1" >
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="' '"/>
				        	    </xsl:otherwise>
			        	    </xsl:choose>
                        </AI_IND>
                        <ASIA_IND>
							<xsl:choose>
	                       	    <xsl:when test="ASIA_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:when test="AI_IND = 1 or ASIA_IND = 1 or BLK_IND = 1 or HSPC_IND = 1 or PAC_ISL_IND = 1 or WHT_IND = 1" >
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="' '"/>
				        	    </xsl:otherwise>
			        	    </xsl:choose>
                        </ASIA_IND>
                        <BLK_IND>
							<xsl:choose>
	                       	    <xsl:when test="BLK_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:when test="AI_IND = 1 or ASIA_IND = 1 or BLK_IND = 1 or HSPC_IND = 1 or PAC_ISL_IND = 1 or WHT_IND = 1" >
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="' '"/>
				        	    </xsl:otherwise>
			        	    </xsl:choose>
                        </BLK_IND>
                        <HSPC_IND>
							<xsl:choose>
	                       	    <xsl:when test="HSPC_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:when test="AI_IND = 1 or ASIA_IND = 1 or BLK_IND = 1 or HSPC_IND = 1 or PAC_ISL_IND = 1 or WHT_IND = 1" >
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="' '"/>
				        	    </xsl:otherwise>
			        	    </xsl:choose>
                        </HSPC_IND>
                        <LANG_CD>
		                    <xsl:choose>
			            	    <xsl:when test="string(LANG_CD)"><xsl:value-of select="LANG_CD"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </LANG_CD>
                        <PAC_ISL_IND>
							<xsl:choose>
	                       	    <xsl:when test="PAC_ISL_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:when test="AI_IND = 1 or ASIA_IND = 1 or BLK_IND = 1 or HSPC_IND = 1 or PAC_ISL_IND = 1 or WHT_IND = 1" >
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="' '"/>
				        	    </xsl:otherwise>
			        	    </xsl:choose>
                        </PAC_ISL_IND>
                        <SS_NUM_APP_DT>
                            <xsl:value-of select="SS_NUM_APP_DT"/>
                        </SS_NUM_APP_DT>
                        <DTH_DT>
			        	        <xsl:choose>
			            	    <xsl:when test="string(DTH_DT)"><xsl:value-of select="DTH_DT"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </DTH_DT>
                        <US_CTZN_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(US_CTZN_SW)"><xsl:value-of select="US_CTZN_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </US_CTZN_SW>
                        <WHT_IND>
							<xsl:choose>
	                       	    <xsl:when test="WHT_IND = 1">
				        	    	<xsl:value-of select="'Y'"/>
				        	    </xsl:when>
				        	    <xsl:when test="AI_IND = 1 or ASIA_IND = 1 or BLK_IND = 1 or HSPC_IND = 1 or PAC_ISL_IND = 1 or WHT_IND = 1" >
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:when>
				        	    <xsl:otherwise>
				        	    	<xsl:value-of select="' '"/>
				        	    </xsl:otherwise>
			        	    </xsl:choose>
                        </WHT_IND>
                        <FEDLY_RCGN_TRB_IND>
		                    <xsl:choose>
			            	    <xsl:when test="string(FEDLY_RCGN_TRB_IND)"><xsl:value-of select="FEDLY_RCGN_TRB_IND"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </FEDLY_RCGN_TRB_IND>
                        <TRB_INCM_EXMP_IND>
		                    <xsl:choose>
			            	    <xsl:when test="string(TRB_INCM_EXMP_IND)"><xsl:value-of select="TRB_INCM_EXMP_IND"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </TRB_INCM_EXMP_IND>
                        
						<ALN_IMMIGR_STAT_CD>
							<xsl:choose>
			            	    <xsl:when test="string(ALN_IMMIGR_STAT_CD)"><xsl:value-of select="ALN_IMMIGR_STAT_CD"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
						</ALN_IMMIGR_STAT_CD>
						<ALN_US_ARR_DT>
							<xsl:choose>
								<xsl:when test="string(ALN_US_ARR_DT)"><xsl:value-of select="ALN_US_ARR_DT"/></xsl:when>
								<xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
							</xsl:choose>                        
						</ALN_US_ARR_DT>
						<ALN_SPON_SW>
							<xsl:choose>
			            	    <xsl:when test="string(ALN_SPON_SW)"><xsl:value-of select="ALN_SPON_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
						</ALN_SPON_SW>
						<ALN_STAT_GRNT_DT>
							<xsl:choose>
								<xsl:when test="string(ALN_STAT_GRNT_DT)"><xsl:value-of select="ALN_STAT_GRNT_DT"/></xsl:when>
								<xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
							</xsl:choose>                        
						</ALN_STAT_GRNT_DT>
						<CTRY_ORIG_NAM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='CTRY_ORIG_NAM' />
							</xsl:call-template>             
						</CTRY_ORIG_NAM>
						<DOC_ID_CD>
							<xsl:choose>
			            	    <xsl:when test="string(DOC_ID_CD)"><xsl:value-of select="DOC_ID_CD"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
						</DOC_ID_CD>
						<ALN_USCIS_NUM>
							<xsl:choose>
 	        					<xsl:when test="string(ALN_USCIS_NUM)"><xsl:value-of select="ALN_USCIS_NUM"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
   							</xsl:choose>
						</ALN_USCIS_NUM>
						<I94_NUM>
							<xsl:choose>
 	        					<xsl:when test="string(I94_NUM)"><xsl:value-of select="I94_NUM"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
   							</xsl:choose>
						</I94_NUM>
						<PSPT_NUM>
							<xsl:choose>
 	        					<xsl:when test="string(PSPT_NUM)"><xsl:value-of select="PSPT_NUM"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
   							</xsl:choose>
						</PSPT_NUM>
						<SEVIS_ID>
							<xsl:choose>
 	        					<xsl:when test="string(SEVIS_ID)"><xsl:value-of select="SEVIS_ID"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
   							</xsl:choose>
						</SEVIS_ID>
						<NATZ_NUM>
							<xsl:choose>
 	        					<xsl:when test="string(NATZ_NUM)"><xsl:value-of select="NATZ_NUM"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
   							</xsl:choose>
						</NATZ_NUM>
						<CTZN_NUM>
							<xsl:choose>
 	        					<xsl:when test="string(CTZN_NUM)"><xsl:value-of select="CTZN_NUM"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
   							</xsl:choose>
						</CTZN_NUM>
						<CARD_NUM>
							<xsl:choose>
 	        					<xsl:when test="string(CARD_NUM)"><xsl:value-of select="CARD_NUM"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
   							</xsl:choose>
						</CARD_NUM>
						<PSPT_EXPR_DT>
							<xsl:choose>
								<xsl:when test="string(PSPT_EXPR_DT)"><xsl:value-of select="PSPT_EXPR_DT"/></xsl:when>
								<xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
							</xsl:choose> 
						</PSPT_EXPR_DT>
						<DOC_DSC>
							<xsl:choose>
 	        					<xsl:when test="string(DOC_DSC)"><xsl:value-of select="DOC_DSC"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
   							</xsl:choose>
						</DOC_DSC>
						<PSPT_I_CTRY_NAM>
							<xsl:choose>
 	        					<xsl:when test="string(PSPT_I_CTRY_NAM)"><xsl:value-of select="PSPT_I_CTRY_NAM"/></xsl:when>
      							<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
   							</xsl:choose>
						</PSPT_I_CTRY_NAM>

                      <YEARLYINCOME DATA_EXIST="{YEARLYINCOME/@DATA_EXIST}">
	                       <CUR_YR_AMT>
			                    <xsl:choose>
				            	    <xsl:when test="string(YEARLYINCOME/CUR_YR_AMT)"><xsl:value-of select="YEARLYINCOME/CUR_YR_AMT"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </CUR_YR_AMT>
	                       <ADD_REC_IND>
                                <xsl:value-of select="'R'"/>
	                        </ADD_REC_IND>	
	                         <CUR_YR_AMT_IND>
			                    <xsl:choose>
				            	    <xsl:when test="string(YEARLYINCOME/CUR_YR_AMT_IND)"><xsl:value-of select="YEARLYINCOME/CUR_YR_AMT_IND"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </CUR_YR_AMT_IND>
	                        <CUR_YR_CHG_IND>
			                    <xsl:choose>
				            	    <xsl:when test="string(YEARLYINCOME/CUR_YR_CHG_IND)"><xsl:value-of select="YEARLYINCOME/CUR_YR_CHG_IND"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </CUR_YR_CHG_IND>
	                        <NXT_YR_AMT>
			                    <xsl:choose>
				            	    <xsl:when test="string(YEARLYINCOME/NXT_YR_AMT)"><xsl:value-of select="YEARLYINCOME/NXT_YR_AMT"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </NXT_YR_AMT>  
	                        <NXT_YR_CHG_IND>
			                    <xsl:choose>
				            	    <xsl:when test="string(YEARLYINCOME/NXT_YR_CHG_IND)"><xsl:value-of select="YEARLYINCOME/NXT_YR_CHG_IND"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	
	                        </NXT_YR_CHG_IND>       
	                        <NXT_YR_AMT_IND>
			                    <xsl:choose>
				            	    <xsl:when test="string(YEARLYINCOME/NXT_YR_AMT_IND)"><xsl:value-of select="YEARLYINCOME/NXT_YR_AMT_IND"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
			     		    	</xsl:choose>
  			     		    	
	                        </NXT_YR_AMT_IND>                                                                                                                                                                           

                        </YEARLYINCOME>
                         <TRB_NAM_TXT>
		                    <xsl:choose>
			            	    <xsl:when test="string(TRB_NAM_TXT)"><xsl:value-of select="TRB_NAM_TXT"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </TRB_NAM_TXT>     
                        <IND_HLTH_SRVC_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(IND_HLTH_SRVC_RESP)"><xsl:value-of select="IND_HLTH_SRVC_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </IND_HLTH_SRVC_RESP>                                                                                             
                        <EFF_BEG_MO>
                            <xsl:value-of select="' '"/>
                            <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                        </EFF_BEG_MO>
                        <INTN_RES_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INTN_RES_RESP)"><xsl:value-of select="INTN_RES_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </INTN_RES_RESP>
                        <LIVE_ARNG_TYP>
                            <xsl:choose>
		            	        <xsl:when test="string(CHLD_OUT_HOME_RESP) and string(CHLD_OUT_HOME_RESP)='Y'">
		            	        	<xsl:value-of select="'01'"/>
		            	        </xsl:when>
		        	        	<xsl:otherwise>
		        	        		<xsl:value-of select="LIVE_ARNG_TYP"/>
		        	        	</xsl:otherwise>
		     		    	</xsl:choose>
                        </LIVE_ARNG_TYP>
                        <LIVE_ARNG_DT>
		                    <xsl:choose>
			            	    <xsl:when test="string(LIVE_ARNG_DT)"><xsl:value-of select="LIVE_ARNG_DT"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
		     		    	</xsl:choose>                        
                        </LIVE_ARNG_DT>
                        <CD_EFF_BEG_MO>
							<xsl:value-of select="999912"/>
	                    </CD_EFF_BEG_MO>
                        <MIG_FARM_WRKR_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(MIG_FARM_WRKR_SW)"><xsl:value-of select="MIG_FARM_WRKR_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </MIG_FARM_WRKR_SW>
                        <MRTL_STAT_CD>
                            <xsl:value-of select="MRTL_STAT_CD"/>
                        </MRTL_STAT_CD>
                        <RES_WI_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(RES_WI_SW)"><xsl:value-of select="RES_WI_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </RES_WI_SW>
                        <!-- CLA WaitList Start-->
    					<WLST_SEQ_NUM >
		                    <xsl:choose>
			            	    <xsl:when test="string(WLST_SEQ_NUM/WLST_NUM)">
			            	    	<xsl:value-of select="WLST_SEQ_NUM/WLST_NUM"/>
			            	    </xsl:when>
			        	        <xsl:otherwise>0</xsl:otherwise>
		     		    	</xsl:choose>                        
                        </WLST_SEQ_NUM>
                        <!-- CLA WaitList End-->
                        <OP_AODA_TMT_RCV_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/OP_AODA_TMT_RCV_SW)"><xsl:value-of select="INDIVIDUAL_PROFILE/OP_AODA_TMT_RCV_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </OP_AODA_TMT_RCV_SW>
                        <RCV_FSTR_CARE_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/FSTR_CARE_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/FSTR_CARE_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </RCV_FSTR_CARE_SW>
                        <RCV_FS_OTH_ST_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/RCV_FS_OTH_ST_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/RCV_FS_OTH_ST_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </RCV_FS_OTH_ST_RESP>
                        <RCV_IND_FS_PG_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/RCV_IND_FS_PG_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/RCV_IND_FS_PG_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </RCV_IND_FS_PG_RESP>
                        <RCV_SSI_LTR_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/RCV_SSI_LTR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/RCV_SSI_LTR_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </RCV_SSI_LTR_RESP>
                        <RCV_SSI_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/RCV_SSI_SW)"><xsl:value-of select="INDIVIDUAL_PROFILE/RCV_SSI_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </RCV_SSI_SW>
                        <SSI_1619B_RCV_SW>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/SSI_1619B_RCV_SW)"><xsl:value-of select="INDIVIDUAL_PROFILE/SSI_1619B_RCV_SW"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </SSI_1619B_RCV_SW>
                        
                        
                        
                        <BNFT_FC_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_FC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_FC_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </BNFT_FC_RESP>
                        <BNFT_KC_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_KC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_KC_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </BNFT_KC_RESP>
                        <BNFT_SG_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_SG_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_SG_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </BNFT_SG_RESP>
                        <BNFT_CRT_O_KC_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_CRT_O_KC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_CRT_O_KC_RESP"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </BNFT_CRT_O_KC_RESP>
                        
                        
                        <EDUC_CD>
                            <xsl:value-of select="EDUC_CD"/>
                        </EDUC_CD>
                        <ENRL_STAT_CD>
                            <xsl:value-of select="ENRL_STAT_CD"/>
                        </ENRL_STAT_CD>
                        <HS_GRAD_STAT_CD>
                            <xsl:value-of select="HS_GRAD_STAT_CD"/>
                        </HS_GRAD_STAT_CD>
                        <HS_GRAD_DT>
		                    <xsl:choose>
			            	    <xsl:when test="string(HS_GRAD_DT)"><xsl:value-of select="HS_GRAD_DT"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
		     		    	</xsl:choose>                        
                        </HS_GRAD_DT>
                        <CARE_DEP_REQ_RSP>
	                        <xsl:choose>
                                <xsl:when test="CHLD_CARE_IND = 1">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:when>
                                <xsl:when test="ISFC_DY_CARE_IND = 1">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:when>
                                <xsl:otherwise> <xsl:value-of select="' '"/></xsl:otherwise>
                            </xsl:choose>
                        </CARE_DEP_REQ_RSP>
                        <STDT_FS_ELG_CD>
                            <xsl:choose>
                                <xsl:when test="SCHL_PLCM_IND = 1">
                                    <xsl:value-of select="'FE'"/>
                                </xsl:when>
                                <xsl:when test="WORK_STDY_IND = 1">
                                    <xsl:value-of select="'WS'"/>
                                </xsl:when>
                                <xsl:otherwise> <xsl:value-of select="' '"/></xsl:otherwise>
                            </xsl:choose>
                        </STDT_FS_ELG_CD>
                        <ENRL_CD>
                        	 <xsl:choose>
			            	    <xsl:when test="string(ENRL_CD)"><xsl:value-of select="ENRL_CD"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
						</ENRL_CD>
                        <CHLD_OUT_HOME_RESP>
		                    <xsl:choose>
		            	        <xsl:when test="string(CHLD_OUT_HOME_RESP)"><xsl:value-of select="CHLD_OUT_HOME_RESP"/></xsl:when>
		        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
			            </CHLD_OUT_HOME_RESP>
			       		<CHLD_TRB_MBR_RESP>
		                    <xsl:choose>
		            	        <xsl:when test="string(INDIVIDUAL_PROFILE/CHLD_TRB_MBR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/CHLD_TRB_MBR_RESP"/></xsl:when>
		        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
			            </CHLD_TRB_MBR_RESP>
			            <LTC_RESP>
							<xsl:choose>
								<xsl:when test="string(INDIVIDUAL_PROFILE/LTC_RESP)">
									<xsl:value-of select="INDIVIDUAL_PROFILE/LTC_RESP" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</LTC_RESP>
			            <TRB_MBR_RESP>
		                    <xsl:choose>
		            	        <xsl:when test="string(INDIVIDUAL_PROFILE/TRB_MBR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/TRB_MBR_RESP"/></xsl:when>
		        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
			            </TRB_MBR_RESP>
			            <!-- MAGI 60762 TXIND_OTSD_HH_IND-->
                        <APP_TAX_DEP_CO_FIL_IND>
		                    <xsl:choose>
			            	    <xsl:when test="string(APP_TAX_DEP_CO_FIL_IND)"><xsl:value-of select="APP_TAX_DEP_CO_FIL_IND"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </APP_TAX_DEP_CO_FIL_IND>	
                        <APP_IND_LIV_OUT_HH_IND>
		                    <xsl:choose>
			            	    <xsl:when test="string(APP_IND_LIV_OUT_HH_IND)"><xsl:value-of select="APP_IND_LIV_OUT_HH_IND"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </APP_IND_LIV_OUT_HH_IND>  
                       <TAX_INDV_OTSD_RESP>
		                    <xsl:choose>
			            	    <xsl:when test="string(TXIND_OTSD_HH_IND)"><xsl:value-of select="TXIND_OTSD_HH_IND"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </TAX_INDV_OTSD_RESP>                        		            
                                              		            
			            <INDIVIDUAL_PROFILE DATA_EXIST="{INDIVIDUAL_PROFILE/@DATA_EXIST}">
			                <ACDT_RESP>                
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/ACDT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/ACDT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABHHQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </ACDT_RESP>
			                <ADPT_ASST_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/ADPT_ASST_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/ADPT_ASST_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </ADPT_ASST_RESP>
			                <ALMY_RCV_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/ALMY_RCV_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/ALMY_RCV_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </ALMY_RCV_RESP>
			                <BNFT_ANTY_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_ANTY_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_ANTY_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_ANTY_RESP>
			                <BNFT_CHRT_RESP>
			                	<xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_CHRT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_CHRT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_CHRT_RESP>
			                <BNFT_CHL_SPRT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_CHL_SPRT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_CHL_SPRT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_CHL_SPRT_RESP>
			                <BNFT_DABL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_DABL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_DABL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_DABL_RESP>
			                <BNFT_DIVND_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_DIVND_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_DIVND_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_DIVND_RESP>
			                <BNFT_EST_TRST_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_EST_TRST_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_EST_TRST_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_EST_TRST_RESP>
			                <BNFT_RR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_RR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_RR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_RR_RESP>
			                <BNFT_SPRT_SEC_RESP>
			                    <xsl:choose>
				            	    <xsl:when test="string(INDIVIDUAL_PROFILE/RCV_SSI_SW)"><xsl:value-of select="INDIVIDUAL_PROFILE/RCV_SSI_SW"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_SPRT_SEC_RESP>
			                <BNFT_SSA_RESP>
			                    <xsl:choose>
				            	    <xsl:when test="string(INDIVIDUAL_PROFILE/RCV_SS_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/RCV_SS_RESP"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_SSA_RESP>
			                <BNFT_UEMPL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_UEMPL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_UEMPL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_UEMPL_RESP>
			                <BNFT_VET_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/BNFT_VET_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/BNFT_VET_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </BNFT_VET_RESP>
			                <CHLD_SPRT_PAY_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/CHLD_SPRT_PAY_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/CHLD_SPRT_PAY_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOEQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </CHLD_SPRT_PAY_RESP>
			                <DABL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/DABL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/DABL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABHHQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </DABL_RESP>
			                <DPND_CARE_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/DPND_CARE_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/DPND_CARE_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOEQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </DPND_CARE_RESP>
			                <DRUG_FELN_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/DRUG_FELN_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/DRUG_FELN_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABHHQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </DRUG_FELN_RESP>
			                <FLEEING_FROM_A_FELONY_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="INDIVIDUAL_PROFILE/INDV_FS_RQST_IND = '1' or INDIVIDUAL_PROFILE/INDV_CC_RQST_IND = '1' and string(INDIVIDUAL_PROFILE/FF_IND)">
			            	        	<xsl:value-of select="INDIVIDUAL_PROFILE/FF_IND"/>
			            	        </xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABHHQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </FLEEING_FROM_A_FELONY_RESP>
			                <FLEEING_FROM_A_FELONY_SRC_CD>
			                	<xsl:choose>
				            		<xsl:when test="INDIVIDUAL_PROFILE/INDV_FS_RQST_IND = '1' or INDIVIDUAL_PROFILE/INDV_CC_RQST_IND = '1'">
		        	    				<xsl:value-of select="'SD'"/>
		        	    			</xsl:when>
					        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
								</xsl:choose>					        	    
			                </FLEEING_FROM_A_FELONY_SRC_CD>
			                <EMPL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/EMPL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/EMPL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABJIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </EMPL_RESP>
			                <FS_RERQST_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/FSET_SCTN_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/FSET_SCTN_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                    <!-- JAVA - If status of ABHHQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </FS_RERQST_RESP>
			                <FSTR_CARE_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/FSTR_CARE_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/FSTR_CARE_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </FSTR_CARE_RESP>
			                <GEN_RLF_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/GEN_RLF_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/GEN_RLF_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </GEN_RLF_RESP>
			                <INCM_INT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/INCM_INT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/INCM_INT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </INCM_INT_RESP>
			                <KINSHIP_CARE_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/KINSHIP_CARE_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/KINSHIP_CARE_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </KINSHIP_CARE_RESP>
			                <LOSS_EMPL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LOSS_EMPL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LOSS_EMPL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABJIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LOSS_EMPL_RESP>
			                <MED_EXP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/MED_EXP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MED_EXP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOEQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </MED_EXP_RESP>
			                <MED_INS_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/MED_INS_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MED_INS_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABBNR is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </MED_INS_RESP>
			                <MED_ACS_RES>
			                    <xsl:choose>
			            	        <xsl:when test="INDIVIDUAL_PROFILE/MED_ACS_RES='Y' or /APPLICATION/ACS_CVRG_OTHR_RESP ='Y'">
										<xsl:value-of select="'Y'"/>
									</xsl:when>
									<xsl:when test="INDIVIDUAL_PROFILE/MED_ACS_RES='N' or /APPLICATION/ACS_CVRG_OTHR_RESP ='N'">
										<xsl:value-of select="'N'"/>
									</xsl:when>
			        	        	<xsl:otherwise>
										<xsl:value-of select="' '"/>
									</xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABHAG is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </MED_ACS_RES>
			                <MED_MEDCR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/MEDCR_ETTL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MEDCR_ETTL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABBNR is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </MED_MEDCR_RESP>
			                <MIL_ALLOT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/MIL_ALLOT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MIL_ALLOT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </MIL_ALLOT_RESP>
			                <MONY_OTHR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/MONY_OTHR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MONY_OTHR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </MONY_OTHR_RESP>
			                <NATL_RFGE_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/NATL_RFGE_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/NATL_RFGE_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </NATL_RFGE_RESP>
			                <NEED_IND_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/NEED_IND_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/NEED_IND_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABHHQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </NEED_IND_RESP>
			                <NEWBORN_RESP>
			                    <xsl:value-of select="' '"/>
			                    <!-- JAVA - If there is a record for any individual, populate 'Y' else 'N'.-->
			                </NEWBORN_RESP>
			                <OTHR_INCM_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_INCM_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_INCM_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_INCM_RESP>			                
			                <OTHR_SRC_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_SRC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_SRC_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_SRC_RESP>
			                <PAY_RMR_BRD_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/PAY_RMR_BRD_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/PAY_RMR_BRD_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOEQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </PAY_RMR_BRD_RESP>
			                <PNSN_RETR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/PNSN_RETR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/PNSN_RETR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </PNSN_RETR_RESP>
			                <PREG_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/PREG_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/PREG_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                
			     		    	<!-- JAVA - If status of ABPRG is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </PREG_RESP>
			                <PROP_SOLD_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/PROP_SOLD_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/PROP_SOLD_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </PROP_SOLD_RESP>
			                <PUB_ASST_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SEP_FS_RQST_SW)"><xsl:value-of select="INDIVIDUAL_PROFILE/SEP_FS_RQST_SW"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABHHQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </PUB_ASST_RESP>
			                <RCV_SSI_EVER_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/RCV_SSI_EVER_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/RCV_SSI_EVER_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </RCV_SSI_EVER_RESP>
			                <RMR_BRD_INC_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/RMR_BRD_INC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/RMR_BRD_INC_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </RMR_BRD_INC_RESP>
			                <SBSID_HSE_IND>
			                    <xsl:choose>
			            	        <xsl:when test="string(/APPLICATION/SBSID_HSE_RESP)"><xsl:value-of select="/APPLICATION/SBSID_HSE_RESP"/></xsl:when>
				        	        <xsl:otherwise>0</xsl:otherwise>
			     		    	</xsl:choose>                
			     		    	<!-- JAVA - If status of ABHEQ is not 'C', populate 0, if 'N' populate 3, if 'P' populate 1, if 'R" populate 2, else 0.-->
			                </SBSID_HSE_IND>
			                <SELF_EMPL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SELF_EMPL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SELF_EMPL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABJIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SELF_EMPL_RESP>
			                <SHLT_CST_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SHLT_CST_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SHLT_CST_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABJIQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SHLT_CST_RESP>
			                <SU_ASST_LIEAP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(/APPLICATION/SU_ASST_LIEAP_RESP)"><xsl:value-of select="/APPLICATION/SU_ASST_LIEAP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                
			     		    	<!-- JAVA - If status of ABHEQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_ASST_LIEAP_RESP>
			                <SU_CST_ASES_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_ASES_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_ASES_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABCST is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_ASES_RESP>
			                <SU_CST_COAL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_COAL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_COAL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_COAL_RESP>
			                <SU_CST_ELEC_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_ELEC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_ELEC_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_ELEC_RESP>
			                <SU_CST_FUEL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_FUEL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_FUEL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_FUEL_RESP>
			                <SU_CST_GAS_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_GAS_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_GAS_RESP"/></xsl:when>
			        	       	 	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_GAS_RESP>
			                <SU_CST_HOME_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_HOME_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_HOME_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABSCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_HOME_RESP>
			                <SU_CST_ISTL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_ISTL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_ISTL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABSCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_ISTL_RESP>
			                <SU_CST_LPGAS_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_LPGAS_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_LPGAS_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_LPGAS_RESP>
			                <SU_CST_MBL_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_MBL_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_MBL_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABSCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_MBL_RESP>
			                <SU_CST_MTGE_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_MTGE_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_MTGE_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABSCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_MTGE_RESP>
			                <SU_CST_OTHR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_OTHR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_OTHR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABSCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_OTHR_RESP>
			                <SU_CST_PHN_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_PHN_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_PHN_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_PHN_RESP>
			                <SU_CST_RENT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_RENT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_RENT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABSCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_RENT_RESP>
			                <SU_CST_SWR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_SWR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_SWR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_SWR_RESP>
			                <SU_CST_TAX_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_TAX_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_TAX_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABSCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_TAX_RESP>
			                <SU_CST_TRSH_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_TRSH_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_TRSH_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_TRSH_RESP>
			                <SU_CST_WOOD_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_WOOD_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_WOOD_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_WOOD_RESP>
			                <SU_CST_WTR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_WTR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_WTR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_WTR_RESP>
			                <SU_CST_WWT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SU_CST_WWT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SU_CST_WWT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUCT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </SU_CST_WWT_RESP>
			                <TRB_TANF_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/TRB_TANF_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/TRB_TANF_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABBNR is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </TRB_TANF_RESP>
			                <UTIL_EXP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/UTIL_EXP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/UTIL_EXP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABBNR is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </UTIL_EXP_RESP>			                
			                <WORK_COMP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/WORK_COMP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/WORK_COMP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABUIT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </WORK_COMP_RESP>
			                <LQD_ASET_CASH_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_CASH_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_CASH_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_CASH_RESP>
			                <LQD_ASET_S_A_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_S_A_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_S_A_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_S_A_RESP>
			                <LQD_ASET_C_A_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_C_A_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_C_A_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_C_A_RESP>
			                <LQD_ASET_O_T_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_OTHR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_OTHR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_O_T_RESP>
			                <LQD_ASET_XMAS_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_XMAS_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_XMAS_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_XMAS_RESP>
			                <LQD_ASET_H_S_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_H_S_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_H_S_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_H_S_RESP>
			                <LQD_ASET_IRA_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_IRA_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_IRA_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_IRA_RESP>
			                <LQD_ASET_K_P_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_K_P_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_K_P_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_K_P_RESP>
			                <LQD_ASET_MM_A_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_MM_A_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_MM_A_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_MM_A_RESP>
			                <LQD_ASET_M_O_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_M_O_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_M_O_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_M_O_RESP>
			                <LQD_ASET_EB_A_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_EB_A_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_EB_A_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_EB_A_RESP>
			                <LQD_ASET_S_C_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_S_C_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_S_C_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_S_C_RESP>
			                <LQD_ASET_ST_B_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_ST_B_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_ST_B_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_ST_B_RESP>
			                <LQD_ASET_TR_F_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_TR_F_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_TR_F_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_TR_F_RESP>
			                <LQD_ASET_TX_S_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_TX_S_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_TX_S_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_TX_S_RESP>
			                <LQD_ASET_US_B_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/LQD_ASET_US_B_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/LQD_ASET_US_B_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABLAT is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </LQD_ASET_US_B_RESP>
			                <OTHR_ASET_P_P_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_ASET_P_P_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_ASET_P_P_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABPPD is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_ASET_P_P_RESP>
			                <OTHR_ASET_VEH_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_ASET_VEH_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_ASET_VEH_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOAQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_ASET_VEH_RESP>
			                <OTHR_ASET_R_P_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_ASET_R_P_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_ASET_R_P_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOAQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_ASET_R_P_RESP>
			                <OTHR_ASET_BUR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_ASET_BUR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_ASET_BUR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOAQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_ASET_BUR_RESP>
			                <OTHR_ASET_L_I_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_ASET_L_I_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_ASET_L_I_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOAQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_ASET_L_I_RESP>
			                <OTHR_ASET_XFR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_ASET_XFR_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_ASET_XFR_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABOAQ is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </OTHR_ASET_XFR_RESP>
			                <EDUC_AID_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/EDUC_AID_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/EDUC_AID_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			     		    	<!-- JAVA - If status of ABBNR is not 'C', populate ' ', if 'N' populate 'N', else populate 'Y'.-->
			                </EDUC_AID_RESP>
			                <MED_INST_RESP>
				                <xsl:choose>
				        	        <xsl:when test="string(INDIVIDUAL_PROFILE/MED_INST_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MED_INST_RESP"/></xsl:when>
				    	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
				 		    	</xsl:choose>
				            </MED_INST_RESP>
				            <SPS_IPOV_PGM_RESP>
				                <xsl:choose>
				        	        <xsl:when test="string(INDIVIDUAL_PROFILE/SPS_IPOV_PGM_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SPS_IPOV_PGM_RESP"/></xsl:when>
				    	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
				 		    	</xsl:choose>
				            </SPS_IPOV_PGM_RESP>
				            <IRWE_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/IRWE_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/IRWE_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
				            </IRWE_RESP>
				            <!-- MAGI profile here PCR 60762-->
			                <OTHR_SRC_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OTHR_SRC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OTHR_SRC_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </OTHR_SRC_RESP>	
			                <TRB_PC_INCM_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/TRB_CPTA_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/TRB_CPTA_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </TRB_PC_INCM_RESP>			                
			                <PRSN_CPTL_GNS_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/PRSN_CPTL_G_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/PRSN_CPTL_G_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </PRSN_CPTL_GNS_RESP>		
   	                
			                <MAGI_DDCTS_SW>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/MAGI_TAX_DDCT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MAGI_TAX_DDCT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </MAGI_DDCTS_SW>			                
			                <STDT_LOAN_INT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/STDT_LOAN_INT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/STDT_LOAN_INT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </STDT_LOAN_INT_RESP>
			                <HIGH_EDUC_EXP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/HIGH_EDUC_EXP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/HIGH_EDUC_EXP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </HIGH_EDUC_EXP_RESP>			                
			                <SLF_EMP_TD_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SELF_E_T_DDCT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SELF_E_T_DDCT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </SLF_EMP_TD_RESP>		
			                
			             	                
			                <CST_JOB_MV_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/OOP_JOB_RLT_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/OOP_JOB_RLT_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </CST_JOB_MV_RESP>			                
			                <ALMY_DDCT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/ALMY_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/ALMY_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </ALMY_DDCT_RESP>
			                <PNLT_ERLY_WDR_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/ERLY_W_FNDS_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/ERLY_W_FNDS_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </PNLT_ERLY_WDR_RESP>
			                <IRA_CTRB_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/IRA_CTRB_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/IRA_CTRB_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </IRA_CTRB_RESP>
			                <SLF_EMP_PLAN_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SEP_CTRB_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/SEP_CTRB_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </SLF_EMP_PLAN_RESP>
			                <LOSS_BUS_PROP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/SALE_PROP_LOSS_RES)"><xsl:value-of select="INDIVIDUAL_PROFILE/SALE_PROP_LOSS_RES"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </LOSS_BUS_PROP_RESP>	
			                <DOM_PA_DDCT_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/DOM_PROD_ACTV_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/DOM_PROD_ACTV_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </DOM_PA_DDCT_RESP>	
			                <TCHER_TD_EXP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/TCHER_T_D_EXP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/TCHER_T_D_EXP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </TCHER_TD_EXP_RESP>	
			                <PRFM_TD_EXP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/PRF_ART_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/PRF_ART_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </PRFM_TD_EXP_RESP>	
			                <FEE_TD_EXP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/FEE_T_D_EXP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/FEE_T_D_EXP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </FEE_TD_EXP_RESP>	
			                <MIL_RSV_TD_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/MIL_R_MBR_EXP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/MIL_R_MBR_EXP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </MIL_RSV_TD_RESP>	
			                <WRT_IN_EXP_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/ALOW_WRT_EXP_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/ALOW_WRT_EXP_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </WRT_IN_EXP_RESP>	
			                <OTH_ONG_PD_DED_IND>
									 <xsl:value-of select="' '" />				                
						    </OTH_ONG_PD_DED_IND>				                
			                <CAL_YR_DDCT_RESP>
									 <xsl:value-of select="' '" />				                
						    </CAL_YR_DDCT_RESP>	
						     <OTHR_DDCT_RESP>
									 <xsl:value-of select="' '" />				                
						    </OTHR_DDCT_RESP>
				            <YEOHC_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/YEOHC_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/YEOHC_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
				            </YEOHC_RESP>
			                <MED_INS_12MO_RESP>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/H_I_PAST_CVRG_RESP)"><xsl:value-of select="INDIVIDUAL_PROFILE/H_I_PAST_CVRG_RESP"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </MED_INS_12MO_RESP>
	    					<!--  ECOW Changes Start -->                    
				   			<LGL_GARD_RESP>
								<xsl:choose>
						       	    <xsl:when test="$AR_LG_PRFL_RESP_VAR='LG'"><xsl:value-of select="'Y'" /></xsl:when>
						       	    <xsl:when test="$AR_LG_PRFL_RESP_VAR='PA'"><xsl:value-of select="'Y'" /></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
								</xsl:choose>        		    
				   			</LGL_GARD_RESP>
				   			<AUTH_REP_RESP>
								<xsl:choose>
						       	    <xsl:when test="$AR_LG_PRFL_RESP_VAR='AR'"><xsl:value-of select="'Y'" /></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
								</xsl:choose>        		    
				   			</AUTH_REP_RESP>
	                        <!--  ECOW Changes End -->   
	                         
			                <CUR_YR_CHG_IND>
			                    <xsl:choose>
			            	        <xsl:when test="string(INDIVIDUAL_PROFILE/CUR_YR_CHG_IND)"><xsl:value-of select="INDIVIDUAL_PROFILE/CUR_YR_CHG_IND"/></xsl:when>
			        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
			                </CUR_YR_CHG_IND>	                                        
			            </INDIVIDUAL_PROFILE>
                        <RELATIONSHIPS DATA_EXIST="{RELATIONSHIPS/@DATA_EXIST}">
                            <xsl:for-each select="RELATIONSHIPS/RELATIONSHIP">
                                <RELATIONSHIP DATA_EXIST="{RELATIONSHIP/@DATA_EXIST}">
                                    <REF_INDV_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(REF_INDV_SEQ_NUM)"><xsl:value-of select="REF_INDV_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>
                                    </REF_INDV_SEQ_NUM>
                                    <SRC_INDV_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SRC_INDV_SEQ_NUM)"><xsl:value-of select="SRC_INDV_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>
                                    </SRC_INDV_SEQ_NUM>
                                    <CARE_RESP>
					                    <xsl:choose>
						            	    <xsl:when test="string(CARE_RESP)"><xsl:value-of select="CARE_RESP"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                    
                                    </CARE_RESP>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="' '"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <PNP_TGHR_SW>
					                    <xsl:choose>
						            	    <xsl:when test="PNP_TGHR_SW = 'Y'">
						            	    	<xsl:value-of select="'Y'"/>
						            	    </xsl:when>
						            	    <xsl:when test="PNP_TGHR_SW = 'N'">
						            	    	<xsl:value-of select="'N'"/>
						            	    </xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                            
                                    </PNP_TGHR_SW>
                                    <RLT_CD>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='RLT_CD' />
						                </xsl:call-template>             
                                        <!-- JAVA - If the RLT_CD is 'FTR', read PATER_ESTB_SW for the INDV_SEQ_NUM from APP_IN_ABSNP where PATER_ESTB_SW is not 'M'. If any of the records have a value of Y populate 'FTR' else if any of the records have a value of L populate 'AFR' else If any of the records have a value of N populate 'CFR' else populate spaces.-->
                                    </RLT_CD>
                                    <TAX_DPND_RESP>
					                    <xsl:choose>
						            	    <xsl:when test="string(TAX_DPND_RESP)"><xsl:value-of select="TAX_DPND_RESP"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="$defaultSpace"/></xsl:otherwise>
					     		    	</xsl:choose>                                    
                                    </TAX_DPND_RESP>
                                    <PRNT_ROLE_RESP>
					                    <xsl:choose>
						            	    <xsl:when test="string(PRNT_ROLE_RESP)"><xsl:value-of select="PRNT_ROLE_RESP"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="$defaultSpace"/></xsl:otherwise>
					     		    	</xsl:choose>                                    
                                    </PRNT_ROLE_RESP>
                                </RELATIONSHIP>
                            </xsl:for-each>
                        </RELATIONSHIPS>
                        <!-- For PP and PP Spouse only following -->
						<!-- Constants : Make sure if you change these -->
			   			<xsl:variable name="APP_IN_CLA_R_DATA">
							<xsl:choose><!-- If Individual sequence number is 1 or 2 populate 'Y' else 'N'-->
					       	    <xsl:when test="INDIVIDUAL_PROFILE/CP_WLST_RESP != 'Y' and INDIVIDUAL_PROFILE/INDV_CLA_RQST_IND = 1">
			    		   	    	<xsl:value-of select="'Y'" />
			        		    </xsl:when>
			        		    <xsl:when test="INDIVIDUAL_PROFILE/CP_WLST_RESP = 'Y' and INDIVIDUAL_PROFILE/INDV_CLA_RQST_IND = 1">
				        	    	<xsl:value-of select="'N'"/>
				        	    </xsl:when>
			        	        <xsl:otherwise>
				        	        <xsl:value-of select="'N'"/>
			        	        </xsl:otherwise>
							</xsl:choose>        		    
						</xsl:variable>
					    <!-- Constants : Make sure if you change above -->
						<APP_IN_CLA_R_DETAILS DATA_EXIST="{$APP_IN_CLA_R_DATA}">
							<INDV_SEQ_NUM>
						    	<xsl:value-of select="INDV_SEQ_NUM"/>
                            </INDV_SEQ_NUM>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
							</EFF_BEG_MO>
							<HNA_CPLT_DT>
								<xsl:value-of select="' '"/>
							</HNA_CPLT_DT>
							<HNA_CPLT_IND>
								<xsl:value-of select="'?'"/>
							</HNA_CPLT_IND>
							<RQST_DT>
								<xsl:value-of select="' '"/>
							</RQST_DT>
							<RQST_IND>
							    <xsl:choose>
									<xsl:when test="$APP_CLA_REQ_IND = 'Y'">
							            <xsl:value-of select="'Y'"/>
							        </xsl:when>
				        	        <xsl:otherwise>
					        	        <xsl:value-of select="'N'"/>
				        	        </xsl:otherwise>
		    	 		    	</xsl:choose>
							</RQST_IND>
							<RQST_TYP_CD>
								<xsl:value-of select="'NR'"/>
							</RQST_TYP_CD>
							<!-- PCR 43100 Default to High Date  -->
							<PREV_CERT_END_DT>
                    			<xsl:value-of select="' '" />
               				</PREV_CERT_END_DT> 
						</APP_IN_CLA_R_DETAILS>
                        
                        <PREGNANCY DATA_EXIST="{PREGNANCY/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
                            </ADD_REC_IND>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <FETUS_CT>
			                    <xsl:choose>
				            	    <xsl:when test="string(PREGNANCY/FETUS_CT)"><xsl:value-of select="PREGNANCY/FETUS_CT"/></xsl:when>
				        	        <xsl:otherwise>0</xsl:otherwise>
			     		    	</xsl:choose>                                
                            </FETUS_CT>
                            <FETUS_CT_IND>
			                    <xsl:value-of select="'0'"/>         
                            </FETUS_CT_IND>
                            <PREG_DUE_DT>
                                <xsl:value-of select="PREGNANCY/PREG_DUE_DT"/>
                            </PREG_DUE_DT>
                            <PREG_END_DT>
                                <xsl:value-of select="'9999-12-31'"/>
                            </PREG_END_DT>
                        </PREGNANCY>
                        <NEWBORN DATA_EXIST="{NEWBORN/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
                            </ADD_REC_IND>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <LIVE_WITH_MOM_RESP>
			                    <xsl:choose>
				            	    <xsl:when test="string(NEWBORN/LIVE_WITH_MOM_RESP)"><xsl:value-of select="NEWBORN/LIVE_WITH_MOM_RESP"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                                   
                            </LIVE_WITH_MOM_RESP>
                        </NEWBORN>
                        
                        
                        <YOUTH_EXITING_OUT_OF_HOME DATA_EXIST="{YEOHC_RESP/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
                            </ADD_REC_IND>
                            <EFF_BEG_MO>
                                <xsl:value-of select="''"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                        </YOUTH_EXITING_OUT_OF_HOME>
                        
                        
                        
                        <DISABILITY DATA_EXIST="{DISABILITY/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
			     		    </ADD_REC_IND>
                            <DABL_BEG_DT>
                                <xsl:value-of select="''"/>
                                <!-- JAVA - Default to High Date.-->
                            </DABL_BEG_DT>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <ESTB_BLND_RESP>
			                    <xsl:choose>
			                    	<xsl:when test="DISABILITY/ESTB_BLND_RESP = 'W' or DISABILITY/MADA_APP_SMBT_RESP = 'Y'">
			    		   	    			<xsl:value-of select="'Y'" />
			    		   	    	</xsl:when>		
				            	    <xsl:when test="string(DISABILITY/ESTB_BLND_RESP)"><xsl:value-of select="DISABILITY/ESTB_BLND_RESP"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                                   
                            </ESTB_BLND_RESP>
                            <ESTB_DABL_SW>
			                    <xsl:choose>
			                    	<xsl:when test="DISABILITY/ESTB_DABL_RESP = 'W' or DISABILITY/MADA_APP_SMBT_RESP = 'Y'">
			    		   	    			<xsl:value-of select="'Y'" />
			    		   	    	</xsl:when>	
				            	    <xsl:when test="string(DISABILITY/ESTB_DABL_RESP)"><xsl:value-of select="DISABILITY/ESTB_DABL_RESP"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                                   
                            </ESTB_DABL_SW>
                            <FS_DABL_SW>
			                    <xsl:choose>
				            	    <xsl:when test="string(DISABILITY/UABL_WORK_SW)"><xsl:value-of select="DISABILITY/UABL_WORK_SW"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                                   
                            </FS_DABL_SW>
                        </DISABILITY>
                        <PRIOR_SSI DATA_EXIST="Y">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
							</ADD_REC_IND>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                        </PRIOR_SSI>
                        <ROOM_AND_BOARD_PAID DATA_EXIST="Y">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
                            </ADD_REC_IND>
                            <EFF_BEG_MO>
                                <xsl:value-of select="''"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                        </ROOM_AND_BOARD_PAID>
                        <DRUG_FELON DATA_EXIST="Y">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
                            </ADD_REC_IND>
                            <CVCT_DT>
                                <xsl:value-of select="''"/>
                                <!-- JAVA - Default to High Date.-->
                            </CVCT_DT>
                            <EFF_BEG_MO>
                                <xsl:value-of select="''"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <DRUG_TEST_RESP>
								<xsl:value-of select="$defaultSpace"/>
                            </DRUG_TEST_RESP>
                            <PGM_TYP>
								<xsl:value-of select="$defaultSpace"/>
                            </PGM_TYP>
                        </DRUG_FELON>
                        <LOSS_OF_EMPLOYMENTS DATA_EXIST="Y">
                            <xsl:for-each select="LOSS_OF_EMPLOYMENTS/LOSS_OF_EMPLOYMENT">
                                <LOSS_OF_EMPLOYMENT DATA_EXIST="Y">
                                    <SEQ_NUM>
                                        <xsl:value-of select="'1'"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <EMPL_LOST_DT>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - Default to High Date.-->
                                    </EMPL_LOST_DT>
                                    <ER_NAM>
                                        <xsl:value-of select="' '"/>
                                    </ER_NAM>
                                    <GOOD_RSN_CD>
                                        <xsl:value-of select="' '"/>
                                    </GOOD_RSN_CD>
                                    <UI_RQST_SW>
					                    <xsl:value-of select="' '"/>
									</UI_RQST_SW>					                    
                                </LOSS_OF_EMPLOYMENT>
                            </xsl:for-each>
                        </LOSS_OF_EMPLOYMENTS>
                        <CHILD_SUPPORTS DATA_EXIST="Y">
                            <xsl:for-each select="CHILD_SUPPORTS/CHILD_SUPPORT">
                                <CHILD_SUPPORT DATA_EXIST="Y">
                                    <SEQ_NUM>
                                        <xsl:value-of select="'1'"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <CHLD_SPRT_EXP_AMT>
					                    <xsl:value-of select="'0'"/>                                        
                                    </CHLD_SPRT_EXP_AMT>
                                    <CHLD_SPRT_AMT_IND>
					                    <xsl:value-of select="'2'"/>                                        
                                    </CHLD_SPRT_AMT_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="' '"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <FREQ_CD>
					                    <xsl:value-of select="' '"/>                                        
                                    </FREQ_CD>
                                </CHILD_SUPPORT>
                            </xsl:for-each>
                        </CHILD_SUPPORTS>
                        <MEDICAL_EXPENSES DATA_EXIST="Y">
                            <xsl:for-each select="MEDICAL_EXPENSES/MEDICAL_EXPENSE">
                                <MEDICAL_EXPENSE DATA_EXIST="Y">
                                    <SEQ_NUM>
                                        <xsl:value-of select="'1'"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
			                    		<xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="' '"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <FREQ_CD>
					                    <xsl:value-of select="' '"/>                                         
                                    </FREQ_CD>
                                    <MED_EXP_AMT>
					                    <xsl:value-of select="'0'"/>                                         
                                    </MED_EXP_AMT>
                                    <MED_EXP_AMT_IND>
					                    <xsl:value-of select="'0'"/>                                         
                                    </MED_EXP_AMT_IND>
                                    <MED_EXP_TYP>
                                        <xsl:value-of select="' '"/>
                                    </MED_EXP_TYP>
                                </MEDICAL_EXPENSE>
                            </xsl:for-each>
                        </MEDICAL_EXPENSES>
                        <ROOM_AND_BOARD_EARNINGS DATA_EXIST="Y">
                            <xsl:for-each select="ROOM_AND_BOARD_EARNINGS/ROOM_AND_BOARD_EARNING">
                                <ROOM_AND_BOARD_EARNING DATA_EXIST="Y">
                                    <SEQ_NUM>
                                        <xsl:value-of select="'1'"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                </ROOM_AND_BOARD_EARNING>
                            </xsl:for-each>
                        </ROOM_AND_BOARD_EARNINGS>
                        
                        <EMPLOYMENTS DATA_EXIST="{EMPLOYMENTS/@DATA_EXIST}">
                            <xsl:for-each select="EMPLOYMENTS/EMPLOYMENT">
                                <EMPLOYMENT DATA_EXIST="{EMPLOYMENT/@DATA_EXIST}">
                                    <EMPL_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(EMPL_SEQ_NUM)"><xsl:value-of select="EMPL_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </EMPL_SEQ_NUM>
                                    <ASSC_EMPL_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_EMPL_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="' '"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <EMPL_BEG_DT>
                                        <xsl:value-of select="EMPL_BEG_DT"/>
                                    </EMPL_BEG_DT>
                                    <EMPL_END_DT>
                                        <xsl:value-of select="EMPL_END_DT"/>
                                    </EMPL_END_DT>
                                    <EMPL_TYP>
                                       <xsl:choose>
						                    <xsl:when test="AMER_CORPS_IND='Y'">
						                        <xsl:value-of select="'M'"/>
						                    </xsl:when>						                   
						                    <xsl:otherwise> 
						                    	<xsl:value-of select="'R'"/>
						                    </xsl:otherwise>
										</xsl:choose>
                                    </EMPL_TYP>
                                    <EMPL_FEIN_NUM>
										<xsl:choose>
        	        						<xsl:when test="string(FEIN_NUM)"><xsl:value-of select="FEIN_NUM"/></xsl:when>
    	        							<xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
 		    							</xsl:choose>
									</EMPL_FEIN_NUM>
                                    <ER_NAM>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ER_NAM' />
						                </xsl:call-template>             
                                    </ER_NAM>
                                    <INCM_DCON_RESP>
					                    <xsl:value-of select="' '"/>  
					                    <!-- JAVA - If EMPL_END_DT is not high date, populate 'Y' else spaces.-->                                      
                                    </INCM_DCON_RESP>
                                    <FST_PAYCK_DT>
                                        <xsl:value-of select="FST_PAYCK_DT"/>
                                    </FST_PAYCK_DT>
                                    <LAST_PAYCK_DT>
                                        <xsl:value-of select="LAST_PAYCK_DT"/>
                                    </LAST_PAYCK_DT>
                                    <ON_STRK_SW>
					                    <xsl:choose>
						            	    <xsl:when test="EMPL_TYP = 'S'"><xsl:value-of select="'Y'"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="'N'"/></xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </ON_STRK_SW>
                                    <PAY_FREQ_CD>
					                    <xsl:choose>
						            	    <xsl:when test="string(PAY_FREQ_CD)"><xsl:value-of select="PAY_FREQ_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </PAY_FREQ_CD>
                                    <STRK_BEG_DT>
                                        <xsl:value-of select="STRK_BEG_DT"/>
                                    </STRK_BEG_DT>
                                    <STRK_END_DT>
	                                    <xsl:value-of select="STRK_END_DT"/>
                                    </STRK_END_DT>
                                    <EMPL_END_DT>
                                        <xsl:value-of select="EMPL_END_DT"/>
                                    </EMPL_END_DT>
                                    <ER_ADR_TXT>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ER_L1_ADR' />
						                </xsl:call-template>             
                                    </ER_ADR_TXT>
                                    <ER_CITY_ADR>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ER_CITY_ADR' />
						                </xsl:call-template>             
                                    </ER_CITY_ADR>
                                    <ER_PHN_NUM>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ER_PHN_NUM' />
						                </xsl:call-template>             
                                    </ER_PHN_NUM>
                                    <ER_STA_ADR>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ER_ST_ADR' />
						                </xsl:call-template>             
                                    </ER_STA_ADR>
                                    <ER_ZIP_ADR>
                                    	<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ER_ZIP_ADR' />
						                </xsl:call-template>             
                                    </ER_ZIP_ADR>
                                    <POSN_TYP_IND>
							            <xsl:choose>
						                    <xsl:when test="POSN_TYP_IND='M'">
						                        <xsl:value-of select="'MA'"/>
						                    </xsl:when>
						                    <xsl:when test="POSN_TYP_IND='S'">
						                        <xsl:value-of select="'ST'"/>
						                    </xsl:when>
						                    <xsl:otherwise> 
						                    	<xsl:value-of select="'UN'"/>
						                    </xsl:otherwise>
										</xsl:choose>						                    
                                    </POSN_TYP_IND>
                                    <TEMP_JOB_IND>
							            <xsl:choose>
						                    <xsl:when test="TEMP_JOB_IND='Y'">
						                        <xsl:value-of select="'TE'"/>
						                    </xsl:when>
						                    <xsl:when test="TEMP_JOB_IND='N'">
						                        <xsl:value-of select="'PE'"/>
						                    </xsl:when>
						                    <xsl:otherwise> 
						                    	<xsl:value-of select="'UN'"/>
						                    </xsl:otherwise>
										</xsl:choose>
                                    </TEMP_JOB_IND>
                                    <LOSS_EMPL_GDCS_CD>
	                                    <xsl:value-of select="' '"/>
                                    </LOSS_EMPL_GDCS_CD>                                  
                                    <WAGES DATA_EXIST="{WAGES/@DATA_EXIST}">
                                        <xsl:for-each select="WAGES/WAGE">
                                            <WAGE DATA_EXIST="{WAGE/@DATA_EXIST}">
                                                <SEQ_NUM>
								                    <xsl:choose>
									            	    <xsl:when test="string(ADTL_PAY_SEQ_NUM)"><xsl:value-of select="ADTL_PAY_SEQ_NUM"/></xsl:when>
									        	        <xsl:otherwise>0</xsl:otherwise>
								     		    	</xsl:choose>                                                     
                                                </SEQ_NUM>
                                                <ADTL_PAY_IND><!-- THIS TAG IS USED INTERNALLY FOR CHECKING WAGE -->
													<xsl:choose>
									            	    <xsl:when test="string(ADTL_PAY_IND)"><xsl:value-of select="ADTL_PAY_IND"/></xsl:when>
									        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
								     		    	</xsl:choose>                                                 
                                                </ADTL_PAY_IND>                                                
                                                <AVG_WORK_HRS_QTY>
								                    <xsl:choose>
									            	    <xsl:when test="string(ADTL_HRS_QTY)"><xsl:value-of select="ADTL_HRS_QTY"/></xsl:when>
									        	        <xsl:otherwise>0</xsl:otherwise>
								     		    	</xsl:choose>                                                    
                                                </AVG_WORK_HRS_QTY>
                                                <AVG_WRK_HR_QTY_IND>
										            <xsl:choose>
									                    <xsl:when test="ADTL_PAY_IND = '0'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_IND = '1'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>
														<xsl:when test="ADTL_PAY_IND = '2'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_IND = '3'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>									                    
									                    <xsl:when test="ADTL_PAY_IND = '4'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>
									                    <xsl:otherwise> 
									                    	<xsl:value-of select="'0'"/>
									                    </xsl:otherwise>
									                </xsl:choose>
                                                </AVG_WRK_HR_QTY_IND>
                                                <EI_TOT_AMT>
										            <xsl:choose>
									                    <xsl:when test="ADTL_PAY_TYP = 'SAL'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = 'I  '">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
														<xsl:when test="ADTL_PAY_TYP = 'TIP'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = 'COM'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>									                    
														<xsl:when test="ADTL_PAY_TYP = '   ' and ADTL_PAY_SEQ_NUM ='7'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '   ' and ADTL_PAY_SEQ_NUM ='8'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '   ' and ADTL_PAY_SEQ_NUM ='9'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '' and ADTL_PAY_SEQ_NUM ='7'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '' and ADTL_PAY_SEQ_NUM ='8'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '' and ADTL_PAY_SEQ_NUM ='9'">
									                        <xsl:value-of select="ADTL_PAY_AMT "/>
									                    </xsl:when>
									                    <xsl:otherwise> 
									                    	<xsl:value-of select="'0.00'"/>
									                    </xsl:otherwise>
									                </xsl:choose>
                                                </EI_TOT_AMT>
                                                <EI_TOT_AMT_IND>
										            <xsl:choose>
									                    <xsl:when test="ADTL_PAY_IND = '0'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_IND = '1'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>
														<xsl:when test="ADTL_PAY_IND = '2'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_IND = '3'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>									                    
									                    <xsl:when test="ADTL_PAY_IND = '4'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>
									                    <xsl:otherwise> 
									                    	<xsl:value-of select="'0'"/>
									                    </xsl:otherwise>
									                </xsl:choose>
                                                </EI_TOT_AMT_IND>
                                                <EI_TYP>
                                                    <xsl:choose>
									                    <xsl:when test="ADTL_PAY_TYP = 'HOR'">
									                        <xsl:value-of select="'REG'"/>
									                    </xsl:when>
									                    <xsl:otherwise>
									                    	<xsl:value-of select="translate(ADTL_PAY_TYP,$lcletters,$ucletters)"/>
									                    </xsl:otherwise>
									                </xsl:choose>
                                                </EI_TYP>
                                                <HR_RT>
													 <xsl:choose>
									                    <xsl:when test="ADTL_PAY_TYP = 'SAL'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = 'I  '">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = 'TIP'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = 'COM'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '   ' and ADTL_PAY_SEQ_NUM ='7'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '   ' and ADTL_PAY_SEQ_NUM ='8'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '   ' and ADTL_PAY_SEQ_NUM ='9'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '' and ADTL_PAY_SEQ_NUM ='7'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '' and ADTL_PAY_SEQ_NUM ='8'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_TYP = '' and ADTL_PAY_SEQ_NUM ='9'">
									                        <xsl:value-of select="'0.00'"/>
									                    </xsl:when>
									                    <xsl:otherwise> 
									                    	<xsl:value-of select="ADTL_PAY_AMT"/>
									            	    </xsl:otherwise>
								     		    	</xsl:choose>                                                    
                                                </HR_RT>
                                                <HR_RT_IND>
										            <xsl:choose>
									                    <xsl:when test="ADTL_PAY_IND = '0'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_IND = '1'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>
														<xsl:when test="ADTL_PAY_IND = '2'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>
									                    <xsl:when test="ADTL_PAY_IND = '3'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>									                    
									                    <xsl:when test="ADTL_PAY_IND = '4'">
									                        <xsl:value-of select="'2'"/>
									                    </xsl:when>
									                    <xsl:otherwise> 
									                    	<xsl:value-of select="'0'"/>
									                    </xsl:otherwise>
									                </xsl:choose>
                                                </HR_RT_IND>
                                            </WAGE>
                                        </xsl:for-each>
                                    </WAGES>                                   
                                    <PRETAXDEDUCTIONS DATA_EXIST="{PRETAXDEDUCTIONS/@DATA_EXIST}">
                                        <xsl:for-each select="PRETAXDEDUCTIONS/PRETAXDEDUCTION">
                                            <PRETAXDEDUCTION DATA_EXIST="{PRETAXDEDUCTION/@DATA_EXIST}">
                                                <SEQ_NUM>
								                    <xsl:choose>
									            	    <xsl:when test="string(ADTL_PAY_SEQ_NUM)"><xsl:value-of select="ADTL_PAY_SEQ_NUM"/></xsl:when>
									        	        <xsl:otherwise>0</xsl:otherwise>
								     		    	</xsl:choose>                                                     
                                                </SEQ_NUM>
                                                <DDCT_FREQ_CD>
                                                  <xsl:choose>
						                   		   <xsl:when test="ADTL_PAY_FREQ_IND='N'">
						                        		<xsl:value-of select="'AN'"/>
						                              </xsl:when>
						                           <xsl:when test="ADTL_PAY_FREQ_IND='T'">
						                            <xsl:value-of select="'BM'"/>
						                           </xsl:when>
						                   		   <xsl:when test="ADTL_PAY_FREQ_IND='B'">
						                        		<xsl:value-of select="'BW'"/>
						                              </xsl:when>
						                           <xsl:when test="ADTL_PAY_FREQ_IND='M'">
						                            <xsl:value-of select="'MO'"/>
						                           </xsl:when>
						                   		   <xsl:when test="ADTL_PAY_FREQ_IND='Q'">
						                        		<xsl:value-of select="'QT'"/>
						                              </xsl:when>
						                           <xsl:when test="ADTL_PAY_FREQ_IND='Y'">
						                            <xsl:value-of select="'SA'"/>
						                           </xsl:when>
						                   		   <xsl:when test="ADTL_PAY_FREQ_IND='S'">
						                        		<xsl:value-of select="'SM'"/>
						                              </xsl:when>
						                           <xsl:when test="ADTL_PAY_FREQ_IND='W'">
						                            <xsl:value-of select="'WE'"/>
						                           </xsl:when>						                           						                           						                           
						                           <xsl:otherwise> 
						                    	      <xsl:value-of select="'UN'"/>
						                           </xsl:otherwise>
										         </xsl:choose>	                                                   
                                                </DDCT_FREQ_CD>	
                                                <DDCT_AMT_IND>
                                                      <xsl:choose>
									                    <xsl:when test="ADTL_PAY_IND = '0'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>
														<xsl:when test="ADTL_PAY_IND = '2'">
									                        <xsl:value-of select="'1'"/>
									                    </xsl:when>
									                    <xsl:otherwise> 
									                    	<xsl:value-of select="'2'"/>
									                    </xsl:otherwise> 
									                  </xsl:choose>                                                      
                                                </DDCT_AMT_IND> 
                                               <DDCT_TYP_CD >
													<xsl:choose>
									            	    <xsl:when test="string(ADTL_PAY_TYP)"><xsl:value-of select="ADTL_PAY_TYP"/></xsl:when>
									        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
								     		    	</xsl:choose>                                                 
                                                </DDCT_TYP_CD >                                                
                                                <DDCT_AMT>
										           <xsl:choose>
									            	    <xsl:when test="string(ADTL_PAY_AMT)"><xsl:value-of select="ADTL_PAY_AMT"/></xsl:when>
									        	        <xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
								     		    	</xsl:choose>            
                                                </DDCT_AMT>
                                             </PRETAXDEDUCTION>
                                        </xsl:for-each>
                                    </PRETAXDEDUCTIONS>
                                  </EMPLOYMENT>
                            </xsl:for-each>
                        </EMPLOYMENTS>
                        <SELF_EMPLOYMENTS DATA_EXIST="{SELF_EMPLOYMENTS/@DATA_EXIST}">
                            <xsl:for-each select="SELF_EMPLOYMENTS/SELF_EMPLOYMENT">
                                <SELF_EMPLOYMENT DATA_EXIST="{SELF_EMPLOYMENT/@DATA_EXIST}">
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SEQ_NUM)"><xsl:value-of select="SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <AVG_INCM_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(AVG_INCM_AMT)"><xsl:value-of select="AVG_INCM_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </AVG_INCM_AMT>
                                    <AVG_INCM_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='AVG_INCM_IND' />
						                </xsl:call-template>
                                    </AVG_INCM_AMT_IND>
                                    <AVG_EXP_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(EXP_AMT)"><xsl:value-of select="EXP_AMT"/></xsl:when>
						        	        <xsl:otherwise>0.00</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </AVG_EXP_AMT>
                                    <AVG_EXP_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='EXP_IND' />
						                </xsl:call-template>
                                    </AVG_EXP_AMT_IND>
                                    <DPRC_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(DPRC_AMT)"><xsl:value-of select="DPRC_AMT"/></xsl:when>
						        	        <xsl:otherwise>0.00</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </DPRC_AMT>
                                    <DPRC_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='DPRC_IND' />
						                </xsl:call-template>
                                    </DPRC_AMT_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <HR_WORK_MO_QTY>
					                    <xsl:choose>
						            	    <xsl:when test="string(HR_WORK_MO_QTY)"><xsl:value-of select="HR_WORK_MO_QTY"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </HR_WORK_MO_QTY>
                                    <HR_WRK_MO_QTY_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='HR_WORK_MO_IND' />
						                </xsl:call-template>
                                    </HR_WRK_MO_QTY_IND>
                                    <SELF_EMPL_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='SELF_EMPL_TYP' />
						                </xsl:call-template>             
                                    </SELF_EMPL_TYP>
                                    <!-- PCR# 43689 - Verification Check List changes for Self Employment - starts -->
                                    <BUS_NAM>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='BUS_NAM' />
						                </xsl:call-template>              
                                    </BUS_NAM>
                                    <BUS_OWSP_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='BUS_OWSP_TYP' />
						                </xsl:call-template>           
                                    </BUS_OWSP_TYP>
                                   <BUS_SGNF_CHG_MO>                                                      				
						    			<xsl:value-of select="BUS_SGNF_CHG_MO"/>                            
                      				</BUS_SGNF_CHG_MO>
                                    <BUS_STRT_MO>                                                      				
						    			<xsl:value-of select="BUS_STRT_MO"/>                 
                      				</BUS_STRT_MO>
                      				<BUS_TAX_FILE_YR>
                						<xsl:value-of select="BUS_TAX_FILE_YR"/>
            						</BUS_TAX_FILE_YR>
                                    <BUS_TAX_ID_NUM>
                						<xsl:value-of select="BUS_TAX_ID_NUM"/>
            						</BUS_TAX_ID_NUM>
                                  <!-- PCR# 43689 - Verification Check List changes for Self Employment - ends -->
                                    <EFF_END_MO>
					                    <xsl:value-of select="'999912'"/>                                        
                                    </EFF_END_MO>
                                    <SELF_MNG_SW>
                                    	<xsl:choose>
						                    <xsl:when test="SELF_EMPL_TYP != 'RP'">
						                        <xsl:value-of select="'Y'"/>
						                    </xsl:when>
						                    <xsl:otherwise> 
						                    	<xsl:choose>
							                    	<xsl:when test="string(SELF_MNG_SW)"><xsl:value-of select="SELF_MNG_SW"/></xsl:when>
							        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
						        	        	</xsl:choose>
						            	    </xsl:otherwise>
					     		    	</xsl:choose>
                                    </SELF_MNG_SW>
                                </SELF_EMPLOYMENT>
                            </xsl:for-each>
                        </SELF_EMPLOYMENTS>
                        <UNEARNED_INCOMES DATA_EXIST="{UNEARNED_INCOMES/@DATA_EXIST}">
                            <xsl:for-each select="UNEARNED_INCOMES/UNEARNED_INCOME">
                                <UNEARNED_INCOME DATA_EXIST="{UNEARNED_INCOME/@DATA_EXIST}">
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SEQ_NUM)"><xsl:value-of select="SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                     <FREQ_CD>
                                      <xsl:choose>				                  
						            	<xsl:when test="string(FREQ_CD)"><xsl:value-of select="FREQ_CD"/></xsl:when>
						        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </FREQ_CD>
                                    <UEI_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(UEI_AMT)">
						            	    <xsl:value-of select="UEI_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </UEI_AMT>
                                    <UEI_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='UEI_AMT_IND' />
						                </xsl:call-template>
                                    </UEI_AMT_IND>
                                    <UEI_BEG_DT>
                                        <xsl:value-of select="UEI_BEG_DT"/>
                                    </UEI_BEG_DT>
                                    <EFF_END_MO>
					                    <xsl:value-of select="'999912'"/>                                        
                                    </EFF_END_MO>
                                    <UEI_STYP>
										<xsl:choose>
						                    <xsl:when test="UEI_TYP = 'CS'">
						                        <xsl:value-of select="'CC'"/>
						                    </xsl:when>
						                    <xsl:when test="UEI_TYP = 'SS'">
						                        <xsl:value-of select="'DI'"/>
						                    </xsl:when>
					        	        	<xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </UEI_STYP>
                                    <UEI_TYP>
										<xsl:call-template name='convertToUppercase'>
								           <xsl:with-param name='toConvert' select='UEI_TYP' />	
								        </xsl:call-template>				                
                                    </UEI_TYP>
                                     <MA_MA_TXBL_AMT> 
					                    <xsl:choose>
						            	    <xsl:when test="(UEI_TYP = 'PE' or UEI_TYP = 'AN')">
						            	    <xsl:value-of select="UEI_TXBL_AMT"/>
						            	    </xsl:when>						            	       						            	    						            	    
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </MA_MA_TXBL_AMT>
                                    <MA_TXBL_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='UEI_TXBL_AMT_IND' />
						                </xsl:call-template>
                                    </MA_TXBL_AMT_IND>   
                                     <PRSN_CPTL_LOSS_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(UEI_LOSS_AMT)">
						            	    <xsl:value-of select="UEI_LOSS_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>						            	    
					     		    	</xsl:choose>                                        
                                    </PRSN_CPTL_LOSS_AMT>
                                    <PRSN_CP_LS_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='UEI_LOSS_AMT_IND' />
						                </xsl:call-template>
                                    </PRSN_CP_LS_AMT_IND>                                                                      
                                </UNEARNED_INCOME>
                            </xsl:for-each>
                        </UNEARNED_INCOMES>
                        <APP_INDV_CNTCS DATA_EXIST="{APP_INDV_CNTCS/@DATA_EXIST}">
                            <xsl:for-each select="APP_INDV_CNTCS/APP_INDV_CNTC">
                                <APP_INDV_CNTC DATA_EXIST="{APP_INDV_CNTC/@DATA_EXIST}">
									 <EMAIL_ADR>
										<xsl:call-template name='convertToUppercase'>
											<xsl:with-param name='toConvert' select='EMAIL_ADR' />
										</xsl:call-template>             
									</EMAIL_ADR>
									<EMAIL_CSNT_IND>
										<xsl:choose>
											<xsl:when test="EMAIL_CSNT_IND = 'Y'">
													<xsl:value-of select="'Y'"/>
											</xsl:when>
											<xsl:when test="EMAIL_CSNT_IND = 'N'">
													<xsl:value-of select="'N'"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="' '"/>
											</xsl:otherwise>
										</xsl:choose>
									 </EMAIL_CSNT_IND>
									 <PAPRLESS_IND>
										<xsl:choose>
											<xsl:when test="PAPRLESS_IND = 'Y'">
													<xsl:value-of select="'Y'"/>
											</xsl:when>
											<xsl:when test="PAPRLESS_IND = 'N'">
													<xsl:value-of select="'N'"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="' '"/>
											</xsl:otherwise>
										</xsl:choose>
									 </PAPRLESS_IND>                                                                                  
                                </APP_INDV_CNTC>
                            </xsl:for-each>
                        </APP_INDV_CNTCS>
                        <TAX_DEDUCTIONS DATA_EXIST="{TAX_DEDUCTIONS/@DATA_EXIST}">
                            <xsl:for-each select="TAX_DEDUCTIONS/TAX_DEDUCTION">
                                <TAX_DEDUCTION DATA_EXIST="{TAX_DEDUCTION/@DATA_EXIST}">
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(TAX_DDCT_SEQ_NUM)"><xsl:value-of select="TAX_DDCT_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </SEQ_NUM>
                                   <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>   
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>                                                                     
                                    <DDCT_TYP_CD>
										<xsl:choose>
						            	    <xsl:when test="string(TAX_DDCT_TYP_CD)"><xsl:value-of select="TAX_DDCT_TYP_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose> 
                                   </DDCT_TYP_CD>
                                    <ALOW_WRT_IN_EXP_CD>
										<xsl:choose>
						            	    <xsl:when test="string(ALOW_WRT_E_TYP_CD)"><xsl:value-of select="ALOW_WRT_E_TYP_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose> 
                                   </ALOW_WRT_IN_EXP_CD>                                   
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="'0'"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <EFF_END_MO>
					                    <xsl:value-of select="'999912'"/>                                        
                                    </EFF_END_MO>                                   
                                    <FREQ_PRD_CD>
                                                  <xsl:choose>
						                   		   <xsl:when test="TAX_DDCT_FREQ_CD='N'">
						                        		<xsl:value-of select="'AN'"/>
						                              </xsl:when>
						                           <xsl:when test="TAX_DDCT_FREQ_CD='T'">
						                            <xsl:value-of select="'BM'"/>
						                           </xsl:when>
						                   		   <xsl:when test="TAX_DDCT_FREQ_CD='B'">
						                        		<xsl:value-of select="'BW'"/>
						                              </xsl:when>
						                           <xsl:when test="TAX_DDCT_FREQ_CD='M'">
						                            <xsl:value-of select="'MO'"/>
						                           </xsl:when>
						                   		   <xsl:when test="TAX_DDCT_FREQ_CD='Q'">
						                        		<xsl:value-of select="'QT'"/>
						                              </xsl:when>
						                           <xsl:when test="TAX_DDCT_FREQ_CD='Y'">
						                            <xsl:value-of select="'SA'"/>
						                           </xsl:when>
						                   		   <xsl:when test="TAX_DDCT_FREQ_CD='S'">
						                        		<xsl:value-of select="'SM'"/>
						                              </xsl:when>
						                           <xsl:when test="TAX_DDCT_FREQ_CD='W'">
						                            <xsl:value-of select="'WE'"/>
						                           </xsl:when>						                           						                           						                           
						                           <xsl:otherwise> 
						                    	      <xsl:value-of select="' '"/>
						                           </xsl:otherwise>
										         </xsl:choose>	                                                   
                                                                           
                                    </FREQ_PRD_CD>
                                     <CL_YR_TOT_MAGI_AMT>
					                   <xsl:choose>
						                    <xsl:when test="TAX_DDCT_TYP_CD = 'MC' or TAX_DDCT_TYP_CD = 'PW'">
						                        <xsl:value-of select="TAX_DDCT_AMT"/>
						                    </xsl:when>						                    
					        	        	 <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </CL_YR_TOT_MAGI_AMT>  
                                    <ONG_PD_TT_MAGI_AMT>
					                   <xsl:choose>
						                    <xsl:when test="TAX_DDCT_TYP_CD != 'MC' and TAX_DDCT_TYP_CD != 'PW'">
						                        <xsl:value-of select="TAX_DDCT_AMT"/>
						                    </xsl:when>						                    
					        	        	 <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </ONG_PD_TT_MAGI_AMT>    
                                     <CL_PRD_T_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='TAX_DDCT_IND' />
						                </xsl:call-template>
                                    </CL_PRD_T_AMT_IND>  
                                    <ONG_PRD_T_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='TAX_DDCT_IND' />
						                </xsl:call-template>
                                    </ONG_PRD_T_AMT_IND> 
                                     <DDCT_SEL_CD>
					                   <xsl:choose>
						                    <xsl:when test="TAX_DDCT_TYP_CD = 'MC' or TAX_DDCT_TYP_CD = 'PW'">
						                        <xsl:value-of select="'CL'"/>
						                    </xsl:when>						                    
					        	        	 <xsl:otherwise> <xsl:value-of select="'OG'"/></xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </DDCT_SEL_CD>                                    
                                    <CL_YR_INCUR_MO>
					                     <xsl:value-of select="TAX_DDCT_BEG_MO"/>  
                                    </CL_YR_INCUR_MO>                                                                                                                                                                                                                                                                                   
                                </TAX_DEDUCTION>
                            </xsl:for-each>
                        </TAX_DEDUCTIONS>
                        <EDUCATION_EIDS DATA_EXIST="{EDUCATION_EIDS/@DATA_EXIST}">
                            <xsl:for-each select="EDUCATION_EIDS/EDUCATION_EID">
                                <EDUCATION_EID DATA_EXIST="{EDUCATION_EID/@DATA_EXIST}">
                                  <APP_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(APP_NUM)"><xsl:value-of select="APP_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                  </APP_NUM>                                
                                   <INDV_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(INDV_SEQ_NUM)"><xsl:value-of select="INDV_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </INDV_SEQ_NUM>
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SEQ_NUM)"><xsl:value-of select="SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </SEQ_NUM>
                                    <EA_SEQ_NUM>
										<xsl:choose>
						            	    <xsl:when test="string(EDUC_AID_SEQ_NUM)"><xsl:value-of select="EDUC_AID_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose> 
                                   </EA_SEQ_NUM>
                                    <EDUC_AID_TYP_CD>
										<xsl:choose>
						            	    <xsl:when test="string(EDUC_AID_TYP_CD)"><xsl:value-of select="EDUC_AID_TYP_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose> 
                                   </EDUC_AID_TYP_CD>                                   
                                    <BEG_MO>
                                              <xsl:value-of select="SEM_TMST_BEG_MO"/>                                   
                                   </BEG_MO>
                                    <END_MO>
                                              <xsl:value-of select="SEM_TMST_END_MO"/>                                   
                                   </END_MO>                                   
                                    <EDUC_AID_AMT>
					                   <xsl:choose>
						            	    <xsl:when test="string(EDUC_AID_AMT)"><xsl:value-of select="EDUC_AID_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </EDUC_AID_AMT>
                                     <EDUC_AID_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='EDUC_AID_AMT_IND' />
						                </xsl:call-template>
                                    </EDUC_AID_AMT_IND>  
                                </EDUCATION_EID>
                            </xsl:for-each>
                        </EDUCATION_EIDS>   
                       <EDUCATION_EIDEFFPRD DATA_EXIST="{EDUCATION_EIDEFFPRD/@DATA_EXIST}">                        
                                  <APP_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(EDUCATION_EIDEFFPRD/APP_NUM)"><xsl:value-of select="APP_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                  </APP_NUM>                                
                                   <INDV_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(EDUCATION_EIDEFFPRD/INDV_SEQ_NUM)"><xsl:value-of select="INDV_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </INDV_SEQ_NUM>
                                    <SEQ_NUM>
					                    <xsl:value-of select="'1'"/>            
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
					                    <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>  
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>                                                                                                        
                                    <EFF_BEG_MO>
                                       <xsl:choose>
						            	    <xsl:when test="string(EDUCATION_EIDEFFPRD/SEM_TMST_BEG_MO)"><xsl:value-of select="EDUCATION_EIDEFFPRD/SEM_TMST_BEG_MO"/></xsl:when>
						        	        <xsl:otherwise> <xsl:value-of select="'999912'"/>      </xsl:otherwise>
					     		    	</xsl:choose>                                                                           
                                   </EFF_BEG_MO>
                                    <EFF_END_MO>
                                         <xsl:choose>
						            	    <xsl:when test="string(EDUCATION_EIDEFFPRD/SEM_TMST_END_MO)"><xsl:value-of select="EDUCATION_EIDEFFPRD/SEM_TMST_END_MO"/></xsl:when>
						        	        <xsl:otherwise> <xsl:value-of select="'999912'"/>      </xsl:otherwise>
					     		    	</xsl:choose>                            
                                   </EFF_END_MO>                                                                                    
                        </EDUCATION_EIDEFFPRD>   
                                             
                         <TAXFILING_INFORMAION DATA_EXIST="{TAXFILING_INFORMAION/@DATA_EXIST}">
                            <APP_NUM>
			                   <xsl:value-of select="TAXFILING_INFORMAION/APP_NUM"/> 		    
			     		    </APP_NUM>
                            <INDV_SEQ_NUM>
			                   <xsl:value-of select="TAXFILING_INFORMAION/INDV_SEQ_NUM"/> 		    
			     		    </INDV_SEQ_NUM>			     		    
                            <SPS_SEQ_NUM>
                               <xsl:value-of select="TAXFILING_INFORMAION/SPS_SEQ_NUM"/> 		  
                            </SPS_SEQ_NUM>
                            <TAX_FILE_STAT_IND>
                             <xsl:choose>	
                              <xsl:when test="TAXFILING_INFORMAION/FILE_CD = 'SIN'">
			    		   	    			<xsl:value-of select="'SI'" />
			    		   	  </xsl:when>	
                               <xsl:when test="TAXFILING_INFORMAION/FILE_CD = 'JIH' or TAXFILING_INFORMAION/FILE_CD = 'JOH'">
			    		   	    			<xsl:value-of select="'MJ'" />
			    		   	  </xsl:when>	
                               <xsl:when test="TAXFILING_INFORMAION/FILE_CD = 'SEP'">
			    		   	    			<xsl:value-of select="'MS'" />
			    		   	  </xsl:when>
			    		   	  <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>		
			    		   	  </xsl:choose>      	    		   	  
                             </TAX_FILE_STAT_IND>
                            <DPND_CLM_IND>
                                <xsl:choose>
				            	    <xsl:when test="string(TAXFILING_INFORMAION/CLMING_DPND_IND)">
				            	       <xsl:value-of select="TAXFILING_INFORMAION/CLMING_DPND_IND"/>
				            	    </xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/> </xsl:otherwise>
			     		    	</xsl:choose>  		              
                            </DPND_CLM_IND>
                            <IN_CL_TX_DP_OH_IND>                                 
                                <xsl:choose>
				            	    <xsl:when test="string(TAXFILING_INFORMAION/OTSD_FILR_IND)">
				            	       <xsl:value-of select="TAXFILING_INFORMAION/OTSD_FILR_IND"/>
				            	    </xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/> </xsl:otherwise>
			     		    	</xsl:choose>                                                            
                           </IN_CL_TX_DP_OH_IND>
                            <OTHR_SPS_IND>
			                    <xsl:value-of select="' '"/>
                            </OTHR_SPS_IND>
                        </TAXFILING_INFORMAION>
                         <CHILDORDEPENDENT_INCOME DATA_EXIST="{CHILDORDEPENDENT_INCOME/@DATA_EXIST}">	     		    
                            <CHL_DP_EI_RSP_IND>
                               <xsl:value-of select="CHILDORDEPENDENT_INCOME/JOB_INCM_E_F_RESP"/> 		  
                            </CHL_DP_EI_RSP_IND>
                            <CHL_DP_UEI_RSP_IND>
                               <xsl:value-of select="CHILDORDEPENDENT_INCOME/OTHR_INCM_E_RESP"/> 		  
                            </CHL_DP_UEI_RSP_IND>
                            <CHL_DP_SEI_RSP_IND>
                               <xsl:value-of select="CHILDORDEPENDENT_INCOME/SEI_EXPT_FILE_RESP"/> 		  
                            </CHL_DP_SEI_RSP_IND>                                                        
                        </CHILDORDEPENDENT_INCOME>                        
                        
                        <TAX_DEPENDENTS DATA_EXIST="{TAX_DEPENDENTS/@DATA_EXIST}">
                            <xsl:for-each select="TAX_DEPENDENTS/TAX_DEPENDENT">
                          <TAX_DEPENDENT DATA_EXIST="{TAX_DEPENDENT/@DATA_EXIST}">
                            <APP_NUM>
			                   <xsl:value-of select="APP_NUM"/> 		    
			     		    </APP_NUM>
                            <INDV_SEQ_NUM>
			                   <xsl:value-of select="SRC_INDV_SEQ_NUM"/> 		    
			     		    </INDV_SEQ_NUM>			     		    
                            <DPND_SEQ_NUM>
                               <xsl:value-of select="REF_INDV_SEQ_NUM"/> 		  
                            </DPND_SEQ_NUM>
                            <DPND_ONLY_YR_IND>
			                    <xsl:value-of select="' '"/>
                            </DPND_ONLY_YR_IND>
                          </TAX_DEPENDENT>
                            </xsl:for-each>
                        </TAX_DEPENDENTS>                        
                        
                        <DEPENDENT_CARES DATA_EXIST="{DEPENDENT_CARES/@DATA_EXIST}">
                            <xsl:for-each select="DEPENDENT_CARES/DEPENDENT_CARE">
                                <DEPENDENT_CARE DATA_EXIST="{DEPENDENT_CARE/@DATA_EXIST}">
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SEQ_NUM)"><xsl:value-of select="SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                          
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <DPND_CARE_EXP_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(DPND_CARE_EXP_AMT)"><xsl:value-of select="DPND_CARE_EXP_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>
                                    </DPND_CARE_EXP_AMT>
                                    <DPND_CARE_EXP_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='DPND_CARE_EXP_IND' />
						                </xsl:call-template>
                                    </DPND_CARE_EXP_IND>
                                    <DPND_EXP_PAID_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(DPND_EXP_PAID_AMT)"><xsl:value-of select="DPND_EXP_PAID_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </DPND_EXP_PAID_AMT>
                                    <DPND_EXP_PAID_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='DPND_EXP_PAID_IND' />
						                </xsl:call-template>
                                    </DPND_EXP_PAID_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <PAID_IN_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(PAID_IN_SEQ_NUM)"><xsl:value-of select="PAID_IN_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>
                                    </PAID_IN_SEQ_NUM>
                                    <PRVD_FST_NAM>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='PRVD_FST_NAM' />
						                </xsl:call-template>             
                                    </PRVD_FST_NAM>
                                    <PRVD_LAST_NAM>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='PRVD_LAST_NAM' />
						                </xsl:call-template>             
                                    </PRVD_LAST_NAM>
                                    <PRVD_ORG_NAM>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='PRVD_ORG_NAM' />
						                </xsl:call-template>             
                                    </PRVD_ORG_NAM>
                                    <PRVD_IN_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(PRVD_IN_SEQ_NUM)"><xsl:value-of select="PRVD_IN_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </PRVD_IN_SEQ_NUM>
                                    <PRVD_TYP>
										<xsl:choose>
						                    <xsl:when test="PRVD_TYP = 'O'">
						                        <xsl:value-of select="'I'"/>
						                    </xsl:when>
						                    <xsl:when test="PRVD_TYP = 'A'">
						                        <xsl:value-of select="'O'"/>
						                    </xsl:when>
						                    <xsl:otherwise> <xsl:value-of select="' '"/></xsl:otherwise>
						                </xsl:choose>					                    
                                    </PRVD_TYP>
                                </DEPENDENT_CARE>
                            </xsl:for-each>
                        </DEPENDENT_CARES>
                        <SHELTER_COSTS DATA_EXIST="{SHELTER_COSTS/@DATA_EXIST}">
                            <xsl:for-each select="SHELTER_COSTS/SHELTER_COST">
                                <SHELTER_COST DATA_EXIST="{SHELTER_COST/@DATA_EXIST}">
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SEQ_NUM)"><xsl:value-of select="SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <SHLT_OBLG_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(SHLT_OBLG_AMT)"><xsl:value-of select="SHLT_OBLG_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </SHLT_OBLG_AMT>
                                    <SHLT_OBLG_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='SHLT_OBLG_IND' />
						                </xsl:call-template>
                                    </SHLT_OBLG_AMT_IND>
                                    <SHLT_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='SHLT_TYP' />
						                </xsl:call-template>             
                                    </SHLT_TYP>
                                    <UNK_CTRB_SW>
					                    <xsl:value-of select="' '"/>                                        
                                    </UNK_CTRB_SW>
                                    <EFF_END_MO>
					                    <xsl:value-of select="'999912'"/>                                        
                                    </EFF_END_MO>
                                </SHELTER_COST>
                            </xsl:for-each>
                        </SHELTER_COSTS>
                        <UTILITY_COSTS DATA_EXIST="{UTILITY_COSTS/@DATA_EXIST}">
                            <xsl:for-each select="UTILITY_COSTS/UTILITY_COST">
                                <UTILITY_COST DATA_EXIST="{UTILITY_COST/@DATA_EXIST}">
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SEQ_NUM)"><xsl:value-of select="SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                            
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <BILL_EXP_RESP>
					                    <xsl:choose>
						            	    <xsl:when test="string(BILL_EXP_RESP)"><xsl:value-of select="BILL_EXP_RESP"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </BILL_EXP_RESP>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <HEAT_SW>
					                    <xsl:choose>
						            	    <xsl:when test="string(HEAT_SW)"><xsl:value-of select="HEAT_SW"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="'N'"/></xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </HEAT_SW>
                                    <MO_OBLG_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(MO_OBLG_AMT)"><xsl:value-of select="MO_OBLG_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </MO_OBLG_AMT>
                                   <MO_OBLG_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='MO_OBLG_IND' />
						                </xsl:call-template>
                                    </MO_OBLG_AMT_IND>
                                    <UTIL_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='UTIL_TYP' />
						                </xsl:call-template>             
                                    </UTIL_TYP>
                                    <EFF_END_MO>
					                    <xsl:value-of select="'999912'"/>                                        
                                    </EFF_END_MO>
                                </UTILITY_COST>
                            </xsl:for-each>
                        </UTILITY_COSTS>
                        <MEDICARES DATA_EXIST="{MEDICARES/@DATA_EXIST}">
                            <xsl:for-each select="MEDICARES/MEDICARE">
                                <MEDICARE DATA_EXIST="{MEDICARE/@DATA_EXIST}">
                                    <SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(SEQ_NUM)"><xsl:value-of select="SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose> 
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <HLTH_INS_CARE_NUM>
                                        <xsl:value-of select="HLTH_INS_CARE_NUM"/>
                                    </HLTH_INS_CARE_NUM>
                                    <PARTA_BEG_DT>
                                        <xsl:value-of select="PARTA_BEG_DT"/>
                                    </PARTA_BEG_DT>
                                    <PARTA_ETTL_RESP>
					                    <xsl:choose>
						            	    <xsl:when test="string(PARTA_ETTL_RESP)"><xsl:value-of select="PARTA_ETTL_RESP"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </PARTA_ETTL_RESP>
                                    <PARTA_PREM_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(PARTA_PREM_AMT)"><xsl:value-of select="PARTA_PREM_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </PARTA_PREM_AMT>
                                    <PARTA_PREM_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='PARTA_PREM_IND' />
						                </xsl:call-template>
                                    </PARTA_PREM_IND>
                                    <PARTA_PREM_PAYR_CD>
                                    	<xsl:choose>
                                    		<xsl:when test="normalize-space(PARTA_PREM_PAYR_CD) = 'SLF'">
                                    			<xsl:value-of select="'SELF'"/>
                                    		</xsl:when>
                                    		<xsl:otherwise><xsl:value-of select="normalize-space(PARTA_PREM_PAYR_CD)"/></xsl:otherwise>
                                    	</xsl:choose>
                                    </PARTA_PREM_PAYR_CD>
                                    <PARTB_BEG_DT>
                                        <xsl:value-of select="PARTB_BEG_DT"/>
                                    </PARTB_BEG_DT>
                                    <PARTB_ETTL_RESP>
					                    <xsl:choose>
						            	    <xsl:when test="string(PARTB_ETTL_RESP)"><xsl:value-of select="PARTB_ETTL_RESP"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                        
                                    </PARTB_ETTL_RESP>
                                    <PARTB_PREM_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(PARTB_PREM_AMT)"><xsl:value-of select="PARTB_PREM_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>
                                    </PARTB_PREM_AMT>
                                    <PARTB_PREM_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='PARTB_PREM_IND' />
						                </xsl:call-template>
                                    </PARTB_PREM_IND>
                                    <PARTB_PREM_PAYR_CD>
										<xsl:choose>	
                                    		<xsl:when test="normalize-space(PARTB_PREM_PAYR_CD) = 'SLF'">
                                    			<xsl:value-of select="'SELF'"/>
                                    		</xsl:when>
                                    		<xsl:when test="normalize-space(PARTB_PREM_PAYR_CD) = 'CVL'">
                                    			<xsl:value-of select="'CIVIL'"/>
                                    		</xsl:when>
                                    		<xsl:when test="normalize-space(PARTB_PREM_PAYR_CD) = 'PTP'">
                                    			<xsl:value-of select="'PRITP'"/>
                                    		</xsl:when>
                                    		<xsl:otherwise><xsl:value-of select="normalize-space(PARTB_PREM_PAYR_CD)"/></xsl:otherwise>
                                    	</xsl:choose>                                    
                                    </PARTB_PREM_PAYR_CD>
                                    <RETR_RESP>
										<xsl:choose>
						                    <xsl:when test="normalize-space(RETR_RESP) ='N'">
						                        <xsl:value-of select="'N'"/>
						                    </xsl:when>
						                    <xsl:when test="normalize-space(RETR_RESP) ='Y'">
						                        <xsl:value-of select="'Y'"/>
						                    </xsl:when>
						                    <xsl:otherwise> <xsl:value-of select="' '"/></xsl:otherwise>
						                </xsl:choose>                                    
                                    </RETR_RESP>
                                </MEDICARE>
                            </xsl:for-each>
                        </MEDICARES>
                        
                        <INSTITUTIONS DATA_EXIST="{INSTITUTIONS/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
			     		    </ADD_REC_IND>
                            <INST_NAM>
                            	<xsl:call-template name='convertToUppercase'>
						        	<xsl:with-param name='toConvert' select='INSTITUTIONS/INST_NAM' />
						        </xsl:call-template>             
                            </INST_NAM>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <INST_CNTY_CD>
			                    <xsl:choose>
				            	    <xsl:when test="string(INSTITUTIONS/INST_CNTY_CD)"><xsl:value-of select="INSTITUTIONS/INST_CNTY_CD"/></xsl:when>
				        	        <xsl:otherwise>0</xsl:otherwise>
			     		    	</xsl:choose>                                         
                            </INST_CNTY_CD>
                            <ORIG_INST_DT>
			                    <xsl:value-of select="INSTITUTIONS/ORIG_INST_DT"/>                                   
                            </ORIG_INST_DT>
                            <CUR_INST_DT>
			                    <xsl:value-of select="INSTITUTIONS/CUR_INST_DT"/>                                   
                            </CUR_INST_DT>
                            <VET_SW>
                            	<xsl:value-of select="'N'"/> 
                            </VET_SW>
                            <INST_TYP>
			                    <xsl:choose>
				            	    <xsl:when test="string(INSTITUTIONS/INST_TYP)"><xsl:value-of select="INSTITUTIONS/INST_TYP"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/> </xsl:otherwise>
			     		    	</xsl:choose>                                         
                            </INST_TYP>
                        </INSTITUTIONS>                        
                        
                     	<COMMUNITY_SPOUSE DATA_EXIST="{COMMUNITY_SPOUSE/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
			     		    </ADD_REC_IND>
                            <SPS_STA_ADR>
                                <xsl:value-of select="SPS_STA_ADR"/>
                            </SPS_STA_ADR>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <SPS_L1_ADR>
                            	<xsl:choose>
							    	<xsl:when test="string(COMMUNITY_SPOUSE/SPS_L1_ADR)">
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select="substring((COMMUNITY_SPOUSE/SPS_L1_ADR),0,20)" />
								        </xsl:call-template>             
							    	</xsl:when>
							        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     </xsl:choose>                        
                            </SPS_L1_ADR>
                            <SPS_CITY_ADR>
                               	<xsl:call-template name='convertToUppercase'>
						        	<xsl:with-param name='toConvert' select="COMMUNITY_SPOUSE/SPS_CITY_ADR" />
						        </xsl:call-template>             
                            </SPS_CITY_ADR>
                            <SPS_L2_ADR>
                               	<xsl:call-template name='convertToUppercase'>
						        	<xsl:with-param name='toConvert' select="COMMUNITY_SPOUSE/SPS_L2_ADR" />
						        </xsl:call-template>             
                            </SPS_L2_ADR>
                            <SPS_ZIP_ADR>
                            	<xsl:value-of select="COMMUNITY_SPOUSE/SPS_ZIP_ADR"/> 
                            </SPS_ZIP_ADR>
                            <SPS_DIR_ADR>
                            	<xsl:value-of select="' '"/> 
                            </SPS_DIR_ADR>
                            <SPS_APT_ADR>
                            	<xsl:value-of select="' '"/> 
                            </SPS_APT_ADR>
                            <SPS_QDRT_ADR>
                            	<xsl:value-of select="' '"/> 
                            </SPS_QDRT_ADR>
                            <SPS_SFX_ADR>
                            	<xsl:value-of select="' '"/> 
                            </SPS_SFX_ADR>
                            <SPS_ST_NUM_ADR>
                            	<xsl:value-of select="' '"/> 
                            </SPS_ST_NUM_ADR>
                            <SPS_UNIT_ADR>
                            	<xsl:value-of select="' '"/> 
                            </SPS_UNIT_ADR>
                        </COMMUNITY_SPOUSE>                         
                        
                      	<LIQUID_ASSETS DATA_EXIST="{LIQUID_ASSETS/@DATA_EXIST}">
                            <xsl:for-each select="LIQUID_ASSETS/LIQUID_ASSET">
                                <LIQUID_ASSET DATA_EXIST="{LIQUID_ASSET/@DATA_EXIST}">
                                    <SEQ_NUM>
	                                    <xsl:value-of select="SEQ_NUM"/> 
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <BURY_DSGT_SW>
										<xsl:choose>
							        	    <xsl:when test="string(BURY_DSGT_SW)"><xsl:value-of select="BURY_DSGT_SW"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                        
                                    </BURY_DSGT_SW>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <LQD_ASET_AMT>
	                                    <xsl:value-of select="LQD_ASET_AMT"/> 
                                    </LQD_ASET_AMT>
                                   <LQD_ASET_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='LQD_ASET_AMT_IND' />
						                </xsl:call-template>
                                    </LQD_ASET_AMT_IND>
                                    <LQD_ASET_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='LQD_ASET_TYP' />
						                </xsl:call-template>             
                                    </LQD_ASET_TYP>
                                    <ASET_AVL_SW>
                                    	 <xsl:value-of select="' '"/>
                                    </ASET_AVL_SW>
                                    <FNCL_INST_NAM>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='FNCL_INST_NAM' />
								        </xsl:call-template>             
                                    </FNCL_INST_NAM>
                                    <FNCL_INST_CITY_ADR>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='FNCL_INST_CITY_ADR' />
								        </xsl:call-template>             
                                    </FNCL_INST_CITY_ADR>
                                    <FNCL_INST_L1_ADR>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='FNCL_INST_L1_ADR' />
								        </xsl:call-template>             
                                    </FNCL_INST_L1_ADR>
                                    <FNCL_INST_L2_ADR>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='FNCL_INST_L2_ADR' />
								        </xsl:call-template>             
                                    </FNCL_INST_L2_ADR>
                                    <FNCL_INST_STA_ADR>
						            	<xsl:value-of select="FNCL_INST_STA_ADR"/>
                                    </FNCL_INST_STA_ADR>
                                    <FNCL_INST_ZIP_ADR>
						            	<xsl:value-of select="FNCL_INST_ZIP_ADR"/>
                                    </FNCL_INST_ZIP_ADR>
                                    <ACCT_NUM>
						            	<xsl:value-of select="ACCT_NUM"/>
                                    </ACCT_NUM>
                                    <JNT_OWN_RESP>
										<xsl:choose>
							        	    <xsl:when test="string(JNT_OWN_RESP)"><xsl:value-of select="JNT_OWN_RESP"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                        
                                    </JNT_OWN_RESP>
                                </LIQUID_ASSET>
                            </xsl:for-each>
                        </LIQUID_ASSETS>                        
                        
                      	<JOINT_OWNERS DATA_EXIST="{JOINT_OWNERS/@DATA_EXIST}">
                            <xsl:for-each select="JOINT_OWNERS/JOINT_OWNER">
                                <JOINT_OWNER DATA_EXIST="{JOINT_OWNER/@DATA_EXIST}">
                                    <SEQ_NUM>
						            	<xsl:value-of select="SEQ_NUM"/>
                                    </SEQ_NUM>
                                    <ASET_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ASET_TYP' />
						                </xsl:call-template>             
                                    </ASET_TYP>
                                    <JNT_OWN_SEQ_NUM>
						            	<xsl:value-of select="JNT_OWN_SEQ_NUM"/>
                                    </JNT_OWN_SEQ_NUM>
                                    <ASET_SUB_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='ASET_SUB_TYP'/>
						                </xsl:call-template>             
                                    </ASET_SUB_TYP>
                                    <JNT_INDV_SEQ_NUM>
						            	<xsl:value-of select="JNT_INDV_SEQ_NUM"/>
                                    </JNT_INDV_SEQ_NUM>
                                    <JNT_OWN_FST_NAM>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='JNT_OWN_FST_NAM' />
								        </xsl:call-template>             
                                    </JNT_OWN_FST_NAM>
                                    <JNT_OWN_LAST_NAM>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='JNT_OWN_LAST_NAM' />
								        </xsl:call-template>             
                                    </JNT_OWN_LAST_NAM>
                                    <JNT_OWN_SFX_NAM>
								        	<xsl:value-of select="' '"/>
                                    </JNT_OWN_SFX_NAM>
                                    <JNT_OWN_MID_INIT>
										<xsl:choose>
							        	    <xsl:when test="string(JNT_OWN_MID_INIT)"><xsl:value-of select="translate(JNT_OWN_MID_INIT,$lcletters,$ucletters)"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                        
                                    </JNT_OWN_MID_INIT>
                                    <OTSD_IND>
										<xsl:value-of select="OTSD_IND"/>
                                    </OTSD_IND>
                                </JOINT_OWNER>
                            </xsl:for-each>
                        </JOINT_OWNERS>
                        
                      	<VEHICLE_ASSETS DATA_EXIST="{VEHICLE_ASSETS/@DATA_EXIST}">
                            <xsl:for-each select="VEHICLE_ASSETS/VEHICLE_ASSET">
                                <VEHICLE_ASSET DATA_EXIST="{VEHICLE_ASSET/@DATA_EXIST}">
                                    <SEQ_NUM>
					            	    <xsl:value-of select="SEQ_NUM"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="' '"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <LIC_PLATE_TXT>
                                    	<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='LIC_PLATE_TXT' />
						                </xsl:call-template>             
                                    </LIC_PLATE_TXT>
									<LIC_STA_CD>
								    	<xsl:choose>
						            	    <xsl:when test="string(LIC_STA_CD)"><xsl:value-of select="LIC_STA_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                      
									</LIC_STA_CD>
                                    <MV_FMV_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(MV_FMV_AMT)"><xsl:value-of select="MV_FMV_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </MV_FMV_AMT>
                                    <MV_FMV_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='MV_FMV_AMT_IND' />
						                </xsl:call-template>
                                    </MV_FMV_AMT_IND>
                                    <MV_MAKE_TXT>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='MV_MAKE_TXT' />
								        </xsl:call-template>             
                                    </MV_MAKE_TXT>
                                    <MV_MODL_TXT>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='MV_MODL_TXT' />
								        </xsl:call-template>             
                                    </MV_MODL_TXT>
                                    <MV_OWE_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(MV_OWE_AMT)"><xsl:value-of select="MV_OWE_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </MV_OWE_AMT>
                                    <MV_OWE_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='MV_OWE_AMT_IND' />
						                </xsl:call-template>
                                    </MV_OWE_AMT_IND>
                                    <MV_RGST_RQR_SW>
								    	<xsl:choose>
						            	    <xsl:when test="string(MV_RGST_RQR_SW)"><xsl:value-of select="MV_RGST_RQR_SW"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                      
									</MV_RGST_RQR_SW>
                                    <MV_YR>
								    	<xsl:choose>
						            	    <xsl:when test="string(MV_YR) and string(MV_YR) = '9999'"><xsl:value-of select="'0'"/></xsl:when>
  						            	    <xsl:when test="string(MV_YR) and string(MV_YR) != '9999'"><xsl:value-of select="MV_YR"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                      
									</MV_YR>
                                    <VEH_ASET_TYP>
		                               	<xsl:call-template name='convertToUppercase'>
								        	<xsl:with-param name='toConvert' select='VEH_ASET_TYP' />
								        </xsl:call-template>             
                                    </VEH_ASET_TYP>
                                    <ASET_AVL_SW>
                                    	 <xsl:value-of select="' '"/>
                                    </ASET_AVL_SW>
                                    <MV_USE_1_CD>
								    	<xsl:choose>
						            	    <xsl:when test="string(MV_USE_1_CD)"><xsl:value-of select="MV_USE_1_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                      
                                    </MV_USE_1_CD>
                                    <MV_USE_2_CD>
								    	<xsl:choose>
						            	    <xsl:when test="string(MV_USE_2_CD)"><xsl:value-of select="MV_USE_2_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                      
                                    </MV_USE_2_CD>
                                    <MV_USE_3_CD>
								    	<xsl:choose>
						            	    <xsl:when test="string(MV_USE_3_CD)"><xsl:value-of select="MV_USE_3_CD"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>                                      
                                    </MV_USE_3_CD>
                                    <JNT_OWN_RESP>
										<xsl:choose>
							        	    <xsl:when test="string(JNT_OWN_RESP)"><xsl:value-of select="JNT_OWN_RESP"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                        
                                    </JNT_OWN_RESP>
                                </VEHICLE_ASSET>
                            </xsl:for-each>
                        </VEHICLE_ASSETS>
                        
                      	<PERSONAL_PROPERTY_ASSETS DATA_EXIST="{PERSONAL_PROPERTY_ASSETS/@DATA_EXIST}">
                            <xsl:for-each select="PERSONAL_PROPERTY_ASSETS/PERSONAL_PROPERTY_ASSET">
                                <PERSONAL_PROPERTY_ASSET DATA_EXIST="{PERSONAL_PROPERTY_ASSET/@DATA_EXIST}">
                                    <SEQ_NUM>
					            	    <xsl:value-of select="SEQ_NUM"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="' '"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <PRSN_PROP_ASET_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='PRSN_PROP_ASET_TYP' />
						                </xsl:call-template>             
                                    </PRSN_PROP_ASET_TYP>
                                    <ASET_AVL_SW>
                                    	 <xsl:value-of select="' '"/>
                                    </ASET_AVL_SW>
                                    <PRSN_PROP_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(PRSN_PROP_AMT)"><xsl:value-of select="PRSN_PROP_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </PRSN_PROP_AMT>
                                    <PRSN_PROP_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='PRSN_PROP_AMT_IND' />
						                </xsl:call-template>
                                    </PRSN_PROP_AMT_IND>
                                    <JNT_OWN_RESP>
										<xsl:choose>
							        	    <xsl:when test="string(JNT_OWN_RESP)"><xsl:value-of select="JNT_OWN_RESP"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                        
                                    </JNT_OWN_RESP>
                                </PERSONAL_PROPERTY_ASSET>
                            </xsl:for-each>
                        </PERSONAL_PROPERTY_ASSETS> 
                        
                      	<REAL_PROPERTY_ASSETS DATA_EXIST="{REAL_PROPERTY_ASSETS/@DATA_EXIST}">
                            <xsl:for-each select="REAL_PROPERTY_ASSETS/REAL_PROPERTY_ASSET">
                                <REAL_PROPERTY_ASSET DATA_EXIST="{REAL_PROPERTY_ASSET/@DATA_EXIST}">
                                    <SEQ_NUM>
					            	    <xsl:value-of select="SEQ_NUM"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="' '"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <INTN_RET_SW>
										<xsl:choose>
							        	    <xsl:when test="string(INTN_RET_SW)"><xsl:value-of select="INTN_RET_SW"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                        
                                    </INTN_RET_SW>
                                    <JNT_OWN_RESP>
										<xsl:choose>
							        	    <xsl:when test="string(JNT_OWN_RESP)"><xsl:value-of select="JNT_OWN_RESP"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                        
                                    </JNT_OWN_RESP>
									<PROP_CITY_ADR>
									    <xsl:value-of select="PROP_CITY_ADR"/>
									</PROP_CITY_ADR>
                                    <PROP_FMV_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(PROP_FMV_AMT)"><xsl:value-of select="PROP_FMV_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </PROP_FMV_AMT>
                                    <PROP_FMV_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='PROP_FMV_AMT_IND' />
						                </xsl:call-template>
                                    </PROP_FMV_AMT_IND>
									<PROP_L1_ADR>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='PROP_L1_ADR' />
						                </xsl:call-template>             
									</PROP_L1_ADR>
									<PROP_L2_ADR>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='PROP_L2_ADR' />
						                </xsl:call-template>             
									</PROP_L2_ADR>
                                    <PROP_OWE_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(PROP_OWE_AMT)"><xsl:value-of select="PROP_OWE_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </PROP_OWE_AMT>
                                    <PROP_OWE_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='PROP_OWE_AMT_IND' />
						                </xsl:call-template>
                                    </PROP_OWE_AMT_IND>
									<PROP_STA_ADR>
									    <xsl:value-of select="PROP_STA_ADR"/>
									</PROP_STA_ADR>
									<PROP_ZIP_ADR>
									    <xsl:value-of select="PROP_ZIP_ADR"/>
									</PROP_ZIP_ADR>
                                    <REAL_PROP_ASET_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='REAL_PROP_ASET_TYP' />
						                </xsl:call-template>             
                                    </REAL_PROP_ASET_TYP>
                                    <ASET_AVL_SW>
                                    	 <xsl:value-of select="' '"/>
                                    </ASET_AVL_SW>
									<RES_SW>
										<xsl:choose>
							        	    <xsl:when test="string(RES_SW)"><xsl:value-of select="RES_SW"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</RES_SW>
									<RLT_CD>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='RLT_CD' />
						                </xsl:call-template>             
									</RLT_CD>
									<SALE_AGR_SW>
										<xsl:choose>
							        	    <xsl:when test="string(SALE_AGR_SW)"><xsl:value-of select="SALE_AGR_SW"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</SALE_AGR_SW>
									<SPS_LIVE_SW>
										<xsl:choose>
							        	    <xsl:when test="string(SPS_LIVE_SW)"><xsl:value-of select="SPS_LIVE_SW"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</SPS_LIVE_SW>
                                </REAL_PROPERTY_ASSET>
                            </xsl:for-each>
                        </REAL_PROPERTY_ASSETS>

                      	<BURIAL_ASSETS DATA_EXIST="{BURIAL_ASSETS/@DATA_EXIST}">
                            <xsl:for-each select="BURIAL_ASSETS/BURIAL_ASSET">
                                <BURIAL_ASSET DATA_EXIST="{BURIAL_ASSET/@DATA_EXIST}">
                                    <SEQ_NUM>
					            	    <xsl:value-of select="SEQ_NUM"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <BURY_ASET_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(BURY_ASET_AMT)"><xsl:value-of select="BURY_ASET_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </BURY_ASET_AMT>
                                    <BURY_ASET_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='BURY_ASET_AMT_IND' />
						                </xsl:call-template>
                                    </BURY_ASET_AMT_IND>
									<BURY_ASET_RLT_CD>
					                    <xsl:choose>
						            	    <xsl:when test="string(BURY_ASET_RLT_CD)='SEL'">
							            	    <xsl:value-of select="' '"/>
						            	    </xsl:when>
						        	        <xsl:otherwise>
		        				    	    	<xsl:call-template name='convertToUppercase'>
								                	<xsl:with-param name='toConvert' select='BURY_ASET_RLT_CD' />
								                </xsl:call-template>             
						        	        </xsl:otherwise>
					     		    	</xsl:choose>                                         
									</BURY_ASET_RLT_CD>
                                    <BURY_ASET_TYP>
					                    <xsl:choose>
						            	    <xsl:when test="string(BURY_ASET_TYP)='CK' or string(BURY_ASET_TYP)='VT'">
							            	    <xsl:value-of select="'BS'"/>
						            	    </xsl:when>
						        	        <xsl:otherwise>
		        				    	    	<xsl:call-template name='convertToUppercase'>
								                	<xsl:with-param name='toConvert' select='BURY_ASET_TYP' />
								                </xsl:call-template>             
						        	        </xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </BURY_ASET_TYP>
                                    <ASET_AVL_SW>
                                    	 <xsl:value-of select="' '"/>
                                    </ASET_AVL_SW>
									<BA_CITY_ADR>
										<xsl:choose>
							        	    <xsl:when test="string(BA_CITY_ADR)"><xsl:value-of select="BA_CITY_ADR"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</BA_CITY_ADR>
									<BA_LINE_1_ADR>
										<xsl:choose>
							        	    <xsl:when test="string(BA_LINE_1_ADR)"><xsl:value-of select="BA_LINE_1_ADR"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</BA_LINE_1_ADR>
									<BA_LINE_2_ADR>
										<xsl:choose>
							        	    <xsl:when test="string(BA_LINE_2_ADR)"><xsl:value-of select="BA_LINE_2_ADR"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</BA_LINE_2_ADR>
									<BUR_AST_ACCT_NUM>
										<xsl:choose>
							        	    <xsl:when test="string(BUR_AST_ACCT_NUM)"><xsl:value-of select="BUR_AST_ACCT_NUM"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</BUR_AST_ACCT_NUM>
									<BUR_AST_INST_NAM>
										<xsl:choose>
							        	    <xsl:when test="string(BUR_AST_INST_NAM)"><xsl:value-of select="BUR_AST_INST_NAM"/></xsl:when>
							        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
							     		</xsl:choose>                           
									</BUR_AST_INST_NAM>
                                    <FOR_INDV_SEQ_NUM>
	                                     <xsl:value-of select="FOR_INDV_SEQ_NUM"/>
                                    </FOR_INDV_SEQ_NUM>
                                </BURIAL_ASSET>
                            </xsl:for-each>
                        </BURIAL_ASSETS>
                        
                      	<LIFE_INSURANCE_DETAILS DATA_EXIST="{LIFE_INSURANCE_DETAILS/@DATA_EXIST}">
                            <xsl:for-each select="LIFE_INSURANCE_DETAILS/LIFE_INSURANCE">
                                <LIFE_INSURANCE DATA_EXIST="{LIFE_INSURANCE/@DATA_EXIST}">
                                    <SEQ_NUM>
					            	    <xsl:value-of select="SEQ_NUM"/>
                                    </SEQ_NUM>
                                    <ASSC_SEQ_NUM>
                                        <xsl:value-of select="'0'"/>
                                    </ASSC_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <EFF_BEG_MO>
                                        <xsl:value-of select="''"/>
                                        <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                                    </EFF_BEG_MO>
                                    <INS_CO_CITY_ADR>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='INS_CO_CITY_ADR' />
						                </xsl:call-template>             
                                    </INS_CO_CITY_ADR>
                                    <INS_CO_L1_ADR>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='INS_CO_L1_ADR' />
						                </xsl:call-template>             
                                    </INS_CO_L1_ADR>
                                    <INS_CO_L2_ADR>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='INS_CO_L2_ADR' />
						                </xsl:call-template>             
                                    </INS_CO_L2_ADR>
                                    <INS_CO_NAM>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='INS_CO_NAM' />
						                </xsl:call-template>             
                                    </INS_CO_NAM>
                                    <INS_CO_STA_ADR>
	                                     <xsl:value-of select="INS_CO_STA_ADR"/>
                                    </INS_CO_STA_ADR>
                                    <INS_CO_ZIP_ADR>
	                                     <xsl:value-of select="INS_CO_ZIP_ADR"/>
                                    </INS_CO_ZIP_ADR>
                                    <LIFE_INS_ASET_TYP>
										<xsl:call-template name='convertToUppercase'>
						                	<xsl:with-param name='toConvert' select='LIFE_INS_ASET_TYP' />
						                </xsl:call-template>             
                                    </LIFE_INS_ASET_TYP>
                                    <LIFE_INS_F_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='LIFE_INS_F_AMT_IND' />
						                </xsl:call-template>
                                    </LIFE_INS_F_AMT_IND>
                                    <LIFE_INS_FACE_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(LIFE_INS_FACE_AMT)"><xsl:value-of select="LIFE_INS_FACE_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </LIFE_INS_FACE_AMT>
                                    <LIFE_INS_PLCY_NUM>
											<xsl:choose>
								        	    <xsl:when test="string(LIFE_INS_PLCY_NUM)"><xsl:value-of select="LIFE_INS_PLCY_NUM"/></xsl:when>
								        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
								     		</xsl:choose>                           
                                    </LIFE_INS_PLCY_NUM>
                                    <LIFE_INS_S_AMT_IND>
										<xsl:call-template name='convertAccessIndToCwwInd'>
						                	<xsl:with-param name='toConvert' select='LIFE_INS_S_AMT_IND' />
						                </xsl:call-template>
                                    </LIFE_INS_S_AMT_IND>
                                    <LIFE_INS_SURR_AMT>
					                    <xsl:choose>
						            	    <xsl:when test="string(LIFE_INS_SURR_AMT)"><xsl:value-of select="LIFE_INS_SURR_AMT"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </LIFE_INS_SURR_AMT>
                                    <ASET_AVL_SW>
                                    	 <xsl:value-of select="' '"/>
                                    </ASET_AVL_SW>
                                </LIFE_INSURANCE>
                            </xsl:for-each>
                        </LIFE_INSURANCE_DETAILS>                        
                        <IRWES DATA_EXIST="{IRWES/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
			     		    </ADD_REC_IND>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <ASSC_SEQ_NUM>
			                    <xsl:value-of select="'0'"/>
			     		    </ASSC_SEQ_NUM>
                            <SEQ_NUM>
			                    <xsl:value-of select="'1'"/>
			     		    </SEQ_NUM>
			     		    <EXP_TYP>
								<xsl:value-of select="$defaultSpace"/>
			     		    </EXP_TYP>
			     		    <MO_EXP_AMT>
               	            	<xsl:value-of select="$defaultAmount"/>
			     		    </MO_EXP_AMT>
			     		    <MO_EXP_IND>
               	            	<xsl:value-of select="$defaultAmountIndicator"/>
			     		    </MO_EXP_IND>
                        </IRWES>
                       <TRANSFER_ASSETS DATA_EXIST="{TRANSFER_ASSETS/@DATA_EXIST}">
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
			     		    </ADD_REC_IND>
                            <EFF_BEG_MO>
                                <xsl:value-of select="' '"/>
                                <!-- JAVA - If RETRO_MA_RESP in T1002 is '0', populate the CCYYMM of APP_FILE_DT in T1002 else populate 999912.-->
                            </EFF_BEG_MO>
                            <ASSC_SEQ_NUM>
			                    <xsl:value-of select="'0'"/>
			     		    </ASSC_SEQ_NUM>
                            <SEQ_NUM>
			                    <xsl:value-of select="'1'"/>
			     		    </SEQ_NUM>
                        </TRANSFER_ASSETS>
                        
	                </INDIVIDUAL>
                </xsl:for-each>
            </INDIVIDUALS>
            <ABSENT_PARENTS DATA_EXIST="{ABSENT_PARENTS/@DATA_EXIST}">
                <xsl:for-each select="ABSENT_PARENTS/ABSENT_PARENT">
                    <ABSENT_PARENT DATA_EXIST="{ABSENT_PARENT/@DATA_EXIST}">
                        <AP_SEQ_NUM>
		                    <xsl:choose>
			            	    <xsl:when test="string(AP_SEQ_NUM)"><xsl:value-of select="AP_SEQ_NUM"/></xsl:when>
			        	        <xsl:otherwise>0</xsl:otherwise>
		     		    	</xsl:choose>
                        </AP_SEQ_NUM>
                        <ASSC_AP_SEQ_NUM>
                            <xsl:value-of select="'0'"/>
                        </ASSC_AP_SEQ_NUM>
                        <ADD_REC_IND>
		                    <xsl:value-of select="'R'"/>
                        </ADD_REC_IND>
                        <AP_ABSN_DT>
                            <xsl:value-of select="AP_ABSN_DT"/>
                        </AP_ABSN_DT>
                        <AP_ABSN_RSN_CD>
                            <xsl:value-of select="AP_ABSN_RSN_CD"/>
                        </AP_ABSN_RSN_CD>
                        <AP_BRTH_DT>
                            <xsl:value-of select="' '"/>
                            <!-- JAVA - Default to High Date.-->
                        </AP_BRTH_DT>
                        <AP_FST_NAM>
							<xsl:call-template name='convertToUppercase'>
			                	<xsl:with-param name='toConvert' select='AP_FST_NAM' />
			                </xsl:call-template>             
                        </AP_FST_NAM>
                        <AP_LAST_NAM>
							<xsl:call-template name='convertToUppercase'>
			                	<xsl:with-param name='toConvert' select='AP_LAST_NAM' />
			                </xsl:call-template>             
                        </AP_LAST_NAM>
                        <AP_MID_INIT>
							<xsl:choose>
				        	    <xsl:when test="string(AP_MID_INIT)"><xsl:value-of select="translate(AP_MID_INIT,$lcletters,$ucletters)"/></xsl:when>
				        	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
				     		</xsl:choose>                           
                        </AP_MID_INIT>
                        <AP_RLT_CD>
                            <xsl:value-of select="' '"/>
                        </AP_RLT_CD>
                        <AP_SEX_IND>
		                    <xsl:choose>
			            	    <xsl:when test="string(AP_SEX_IND)"><xsl:value-of select="AP_SEX_IND"/></xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>
                        </AP_SEX_IND>
                        <AP_SS_NUM>
                            <xsl:value-of select="'0'"/>
                        </AP_SS_NUM>
                        <CASE_GDCS_CLM_SW>
		                    <xsl:choose>
			            	    <xsl:when test="CASE_GDCS_CLM_SW = 'Y'">
			            	    	<xsl:value-of select="'Y'"/>
			            	    </xsl:when>
			            	    <xsl:when test="CASE_GDCS_CLM_SW = 'N'">
			            	    	<xsl:value-of select="'N'"/>
			            	    </xsl:when>
			        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
		     		    	</xsl:choose>                            
                        </CASE_GDCS_CLM_SW>
                        <LAST_CNTC_DT>
                            <xsl:value-of select="' '"/>
                            <!-- JAVA - Default to High Date.-->
                        </LAST_CNTC_DT>
                        <ABSENT_PARENT_CHILDREN DATA_EXIST="{ABSENT_PARENT_CHILDREN/@DATA_EXIST}">
                            <xsl:for-each select="ABSENT_PARENT_CHILDREN/ABSENT_PARENT_CHILD">
                                <ABSENT_PARENT_CHILD DATA_EXIST="{ABSENT_PARENT_CHILD/@DATA_EXIST}">
                                    <INDV_SEQ_NUM>
					                    <xsl:choose>
						            	    <xsl:when test="string(INDV_SEQ_NUM)"><xsl:value-of select="INDV_SEQ_NUM"/></xsl:when>
						        	        <xsl:otherwise>0</xsl:otherwise>
					     		    	</xsl:choose>                                         
                                    </INDV_SEQ_NUM>
                                    <ADD_REC_IND>
					                    <xsl:value-of select="'R'"/>
                                    </ADD_REC_IND>
                                    <PATER_ESTB_SW>
					                    <xsl:choose>
						            	    <xsl:when test="string(PATER_ESTB_SW)"><xsl:value-of select="PATER_ESTB_SW"/></xsl:when>
						        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
					     		    	</xsl:choose>
                                    </PATER_ESTB_SW>
                                </ABSENT_PARENT_CHILD>
                            </xsl:for-each>
                        </ABSENT_PARENT_CHILDREN>
                    </ABSENT_PARENT>
                </xsl:for-each>
            </ABSENT_PARENTS>
            
            <MEDICAL_COVERAGES DATA_EXIST="{MEDICAL_COVERAGES/@DATA_EXIST}">
	            <xsl:for-each select="MEDICAL_COVERAGES/MEDICAL_COVERAGE">
		            <MEDICAL_COVERAGE DATA_EXIST="{MEDICAL_COVERAGE/@DATA_EXIST}">
                            <PLCY_SEQ_NUM>
			                    <xsl:choose>
				            	    <xsl:when test="string(PLCY_SEQ_NUM)"><xsl:value-of select="PLCY_SEQ_NUM"/></xsl:when>
				        	        <xsl:otherwise>0</xsl:otherwise>
			     		    	</xsl:choose>
                            </PLCY_SEQ_NUM>
                            <ASSC_PLCY_SEQ_NUM>
                                <xsl:value-of select="'0'"/>
                            </ASSC_PLCY_SEQ_NUM>
                            <ADD_REC_IND>
			                    <xsl:value-of select="'R'"/>
                            </ADD_REC_IND>
                            <INS_PLCY_NUM>
			                    <xsl:choose>
				            	    <xsl:when test="string(INS_PLCY_NUM)"><xsl:value-of select="INS_PLCY_NUM"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </INS_PLCY_NUM>
                            <GRP_NUM>
			                    <xsl:choose>
				            	    <xsl:when test="string(GRP_NUM)"><xsl:value-of select="GRP_NUM"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </GRP_NUM>
 							<MO_PREM_AMT>
			                    <xsl:choose>
				            	    <xsl:when test="string(MO_PREM_AMT)"><xsl:value-of select="MO_PREM_AMT"/></xsl:when>
				        	        <xsl:otherwise>0</xsl:otherwise>
			     		    	</xsl:choose>                                         
	                        </MO_PREM_AMT>
    	                    <MO_PREM_AMT_IND>
								<xsl:call-template name='convertAccessIndToCwwInd'>
				                	<xsl:with-param name='toConvert' select='MO_PREM_AMT_IND' />
			    	            </xsl:call-template>
                    	    </MO_PREM_AMT_IND>
                        	<PLCY_HOLD_BRTH_DT>
			                    <xsl:choose>
				            	    <xsl:when test="string(PLCY_HOLD_BRTH_DT)"><xsl:value-of select="PLCY_HOLD_BRTH_DT"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
			     		    	</xsl:choose>                                         
                            </PLCY_HOLD_BRTH_DT>
                            <PREM_FREQ_IND>
			                    <xsl:choose>
				            	    <xsl:when test="string(PREM_FREQ_IND)"><xsl:value-of select="PREM_FREQ_IND"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
			     		    	</xsl:choose>                                         
                            </PREM_FREQ_IND>
                            <PLCY_BEG_DT>
                                <xsl:value-of select="' '"/>
                            </PLCY_BEG_DT>
                            <PLCY_END_DT>
                                <xsl:value-of select="' '"/>
                            </PLCY_END_DT>
	                        <PRVD_CITY_ADR>
	                        	<xsl:call-template name='convertToUppercase'>
							    	<xsl:with-param name='toConvert' select='PRVD_CITY_ADR' />
							    </xsl:call-template>             
	                        </PRVD_CITY_ADR>
	                        <PRVD_L1_ADR>
			                    <xsl:choose>
				            	    <xsl:when test="string(PRVD_L1_ADR)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='PRVD_L1_ADR' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </PRVD_L1_ADR>
	                        <PRVD_NAM>
			                    <xsl:choose>
				            	    <xsl:when test="string(PRVD_NAM)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='PRVD_NAM' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </PRVD_NAM>
	                        <PRVD_STA_ADR>
	                            <xsl:value-of select="PRVD_STA_ADR"/>
	                        </PRVD_STA_ADR>
	                        <PRVD_ZIP_ADR>
	                            <xsl:value-of select="PRVD_ZIP_ADR"/>
	                        </PRVD_ZIP_ADR>                            
	                        <PLCY_HOLD_FST_NAM>
			                    <xsl:choose>
				            	    <xsl:when test="string(PLCY_HOLD_FST_NAM)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='PLCY_HOLD_FST_NAM' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </PLCY_HOLD_FST_NAM>
	                        <PLCY_HOLD_LAST_NAM>
			                    <xsl:choose>
				            	    <xsl:when test="string(PLCY_HOLD_LAST_NAM)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='PLCY_HOLD_LAST_NAM' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </PLCY_HOLD_LAST_NAM>
	                        <PLCY_HOLD_MID_INIT>
			                    <xsl:choose>
				            	    <xsl:when test="string(PLCY_HOLD_MID_INIT)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select="translate(PLCY_HOLD_MID_INIT,$lcletters,$ucletters)" />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </PLCY_HOLD_MID_INIT>
                            <PLCY_HOLD_SEQ_NUM>
                                <xsl:value-of select="PLCY_HOLD_SEQ_NUM"/>
                            </PLCY_HOLD_SEQ_NUM>
                            <MAJ_MED_SW>
			                    <xsl:choose>
				            	    <xsl:when test="string(MAJ_MED_SW)"><xsl:value-of select="MAJ_MED_SW"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </MAJ_MED_SW>
                            <ER_NAM>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_NAM)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='ER_NAM' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>                            
			     		    </ER_NAM>  
                            <ER_CITY_ADR>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_CITY_ADR)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='ER_CITY_ADR' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </ER_CITY_ADR>                            
                            <ER_L1_ADR>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_L1_ADR)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='ER_L1_ADR' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </ER_L1_ADR>                            
                            <ER_ST_ADR>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_ST_ADR)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='ER_ST_ADR' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </ER_ST_ADR>                            
                            <ER_ZIP_CD_ADR>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_ZIP_CD_ADR)"><xsl:value-of select="ER_ZIP_CD_ADR"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </ER_ZIP_CD_ADR>                            
                            <ER_PHN_NUM>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_PHN_NUM)"><xsl:value-of select="ER_PHN_NUM"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </ER_PHN_NUM>                            
                            <FEIN_NUM_ID>
			                    <xsl:choose>
				            	    <xsl:when test="string(FEIN_NUM_ID)"><xsl:value-of select="FEIN_NUM_ID"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'0'"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </FEIN_NUM_ID>                            
                            <HLTH_INS_TYP>
			                    <xsl:choose>
				            	    <xsl:when test="string(HLTH_INS_TYP)"><xsl:value-of select="HLTH_INS_TYP"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </HLTH_INS_TYP>                            
                            <HLTH_PLCY_PLAN_NAM>
			                    <xsl:choose>
				            	    <xsl:when test="string(HLTH_PLCY_PLAN_NAM)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='HLTH_PLCY_PLAN_NAM' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </HLTH_PLCY_PLAN_NAM>                            
                            <INS_TRU_CUR_JB_IND>
			                    <xsl:choose>
				            	    <xsl:when test="string(INS_TRU_CUR_JB_IND)"><xsl:value-of select="INS_TRU_CUR_JB_IND"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </INS_TRU_CUR_JB_IND> 
                            <PLCY_HOLD_BRTH_DT>
			                    <xsl:choose>
				            	    <xsl:when test="string(PLCY_HOLD_BRTH_DT)"><xsl:value-of select="PLCY_HOLD_BRTH_DT"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </PLCY_HOLD_BRTH_DT>                                                                                                           
                            <ST_EE_BNFT_IND>
			                    <xsl:choose>
				            	    <xsl:when test="string(ST_EE_BNFT_IND)"><xsl:value-of select="ST_EE_BNFT_IND"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </ST_EE_BNFT_IND>
                        	  <ER_CNTC_PRSN_NAM>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_CNTC_PRSN_NAM)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='ER_CNTC_PRSN_NAM' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
	                        </ER_CNTC_PRSN_NAM>
							<ER_CNTC_PHN_NUM>
			                    <xsl:choose>
				            	    <xsl:when test="string(ER_CNTC_PHN_NUM)"><xsl:value-of select="ER_CNTC_PHN_NUM"/></xsl:when>
				        	        <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>
                            </ER_CNTC_PHN_NUM>
							<ER_CNTC_EMAIL_ADR>
								<xsl:call-template name='convertToUppercase'>
									<xsl:with-param name='toConvert' select='ER_CNTC_EMAIL_ADR' />
								</xsl:call-template>             
							</ER_CNTC_EMAIL_ADR>
							<ER_CT_PHN_EXTN_NUM>
								<xsl:choose>
				            	    <xsl:when test="string(ER_CT_PHN_EXTN_NUM)">
			                        	<xsl:call-template name='convertToUppercase'>
									    	<xsl:with-param name='toConvert' select='ER_CT_PHN_EXTN_NUM' />
									    </xsl:call-template>             
				            	    </xsl:when>
				            	    <xsl:otherwise><xsl:value-of select="' '"/></xsl:otherwise>
			     		    	</xsl:choose>            
							</ER_CT_PHN_EXTN_NUM>
							                             
                            <MEDICAL_COVERAGE_CHILDREN DATA_EXIST="{MEDICAL_COVERAGE_CHILDREN/@DATA_EXIST}">
                            	<xsl:for-each select="MEDICAL_COVERAGE_CHILDREN/MEDICAL_COVERAGE_CHILD">
                                	<MEDICAL_COVERAGE_CHILD DATA_EXIST="{MEDICAL_COVERAGE_CHILD/@DATA_EXIST}">
                                        <PLCY_SEQ_NUM>
						                    <xsl:value-of select="PLCY_SEQ_NUM"/>
                                        </PLCY_SEQ_NUM>
			                            <INDV_SEQ_NUM>
						                    <xsl:choose>
							            	    <xsl:when test="string(INDV_SEQ_NUM)"><xsl:value-of select="INDV_SEQ_NUM"/></xsl:when>
							        	        <xsl:otherwise>0</xsl:otherwise>
						     		    	</xsl:choose>                                         
                	                    </INDV_SEQ_NUM>                                        
                                        <CVRG_BEG_DT>
						                    <xsl:choose>
							            	    <xsl:when test="string(CVRG_BEG_DT)"><xsl:value-of select="CVRG_BEG_DT"/></xsl:when>
							        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
						     		    	</xsl:choose>                                         
                                        </CVRG_BEG_DT>
                                        <CVRG_END_DT>
						                    <xsl:choose>
							            	    <xsl:when test="string(CVRG_END_DT)"><xsl:value-of select="CVRG_END_DT"/></xsl:when>
							        	        <xsl:otherwise><xsl:value-of select="'9999-12-31'"/></xsl:otherwise>
						     		    	</xsl:choose>                                         
                                        </CVRG_END_DT>
                                        <RLT_CD>
                                        	<xsl:choose>
                                        		<xsl:when test="string(RLT_CD) and string(RLT_CD)= 'F'"><xsl:value-of select="1"/></xsl:when>
							            	    <xsl:when test="string(RLT_CD) and string(RLT_CD)= 'S'"><xsl:value-of select="2"/></xsl:when>
							            	    <xsl:when test="string(RLT_CD) and string(RLT_CD)= 'C'"><xsl:value-of select="3"/></xsl:when>
   							            	    <xsl:when test="string(RLT_CD) and string(RLT_CD)= 'P'"><xsl:value-of select="4"/></xsl:when>
							            	    <xsl:when test="string(RLT_CD) and string(RLT_CD)= 'O'"><xsl:value-of select="5"/></xsl:when>
							        	        <xsl:otherwise><xsl:value-of select="RLT_CD"/></xsl:otherwise>
						                    </xsl:choose>
                                        </RLT_CD>
                                        <PAST_CVRG_GDCS_CD>
                                        	<xsl:call-template name='convertAccessPastCvrgCodeToCwwPastCvrgCode'>
                							      <xsl:with-param name='toConvert' select='PAST_CVRG_GDCS_CD' /> 
               								 </xsl:call-template>
						             
			                             </PAST_CVRG_GDCS_CD>

                                                 
                                        <ADD_REC_IND>
						                    <xsl:value-of select="'R'"/>
                                        </ADD_REC_IND>
                                    </MEDICAL_COVERAGE_CHILD>
                                </xsl:for-each>
                            </MEDICAL_COVERAGE_CHILDREN>
                    </MEDICAL_COVERAGE>
                </xsl:for-each>
            </MEDICAL_COVERAGES>            
			<ACS_EMPLOYER_MEDICAL_COVERAGES DATA_EXIST="{ACS_EMPLOYER_MEDICAL_COVERAGES/@DATA_EXIST}">
				<xsl:for-each select="ACS_EMPLOYER_MEDICAL_COVERAGES/ACS_EMPLOYER_MEDICAL_COVERAGE">
					<ACS_EMPLOYER_MEDICAL_COVERAGE DATA_EXIST="{ACS_EMPLOYER_MEDICAL_COVERAGE/@DATA_EXIST}">
						<SEQ_NUM>
							<xsl:choose>
								<xsl:when test="string(SEQ_NUM)">
									<xsl:value-of select="SEQ_NUM" />
								</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</SEQ_NUM>
						<ASSC_SEQ_NUM>
                        	<xsl:value-of select="'0'"/>
                        </ASSC_SEQ_NUM>
						<ADD_REC_IND>
			                <xsl:value-of select="'R'"/>
                        </ADD_REC_IND>
						<EE_BRTH_DT>
							<xsl:choose>
								<xsl:when test="string(EE_BRTH_DT)">
									<xsl:value-of select="EE_BRTH_DT" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="'9999-12-31'" />
								</xsl:otherwise>
							</xsl:choose>
						</EE_BRTH_DT>
						<EE_FST_NAM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='EE_FST_NAM' />
							</xsl:call-template>
						</EE_FST_NAM>
						<EE_LAST_NAM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='EE_LAST_NAM' />
							</xsl:call-template>
						</EE_LAST_NAM>
						<EE_MID_INIT>
							<xsl:choose>
								<xsl:when test="string(EE_MID_INIT)">
									<xsl:value-of select="translate(EE_MID_INIT,$lcletters,$ucletters)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</EE_MID_INIT>
						<ER_CITY_ADR>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_CITY_ADR' />
							</xsl:call-template>
						</ER_CITY_ADR>
						<ER_ADR>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_ADR' />
							</xsl:call-template>
						</ER_ADR>
						<ER_ST_ADR>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_ST_ADR' />
							</xsl:call-template>
						</ER_ST_ADR>
						<ER_ZIP_ADR>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_ZIP_ADR' />
							</xsl:call-template>
						</ER_ZIP_ADR>
						<ER_NAM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_NAM' />
							</xsl:call-template>
						</ER_NAM>
						<ER_PHN_NUM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_PHN_NUM' />
							</xsl:call-template>
						</ER_PHN_NUM>
						<ER_CNTC_PHN_NUM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_CNTC_PHN_NUM' />
							</xsl:call-template>
						</ER_CNTC_PHN_NUM>
						<ER_CT_PHN_EXTN_NUM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_CT_PHN_EXTN_NUM' />
							</xsl:call-template>
						</ER_CT_PHN_EXTN_NUM>
						<ER_CNTC_PRSN_NAM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_CNTC_PRSN_NAM' />
							</xsl:call-template>
						</ER_CNTC_PRSN_NAM>
						<ER_CNTC_EMAIL_ADR>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_CNTC_EMAIL_ADR' />
							</xsl:call-template>
						</ER_CNTC_EMAIL_ADR>
						<ER_CVRG_END_DT>
							<xsl:choose>
								<xsl:when test="string(ER_CVRG_END_DT)">
									<xsl:value-of select="ER_CVRG_END_DT" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="'9999-12-31'" />
								</xsl:otherwise>
							</xsl:choose>
						</ER_CVRG_END_DT>
						<ER_PLN_MIN_VAL_RSP>
							<xsl:choose>
								<xsl:when test="string(ER_PLN_MIN_VAL_RSP) and string(ER_PLN_MIN_VAL_RSP)= 'I'">
									<xsl:value-of select="'U'"/>
								</xsl:when>
								<xsl:when test="string(ER_PLN_MIN_VAL_RSP)">
									<xsl:value-of select="ER_PLN_MIN_VAL_RSP" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</ER_PLN_MIN_VAL_RSP>
						<ER_PLAN_NAM>
							<xsl:call-template name='convertToUppercase'>
								<xsl:with-param name='toConvert' select='ER_PLAN_NAM' />
							</xsl:call-template>
						</ER_PLAN_NAM>
						<ER_PREM_AMT>
							<xsl:choose>
								<xsl:when test="string(ER_PREM_AMT)">
									<xsl:value-of select="ER_PREM_AMT" />
								</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</ER_PREM_AMT>
						<ER_PREM_FREQ_CD>
							<xsl:choose>
								<xsl:when test="string(ER_PREM_FREQ_CD)">
									<xsl:value-of select="ER_PREM_FREQ_CD" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</ER_PREM_FREQ_CD>
						<ER_NEXT_PLN_YR_RSP>
							<xsl:choose>
								<xsl:when test="string(ER_NEXT_PLN_YR_RSP) and string(ER_NEXT_PLN_YR_RSP)= 'I'">
									<xsl:value-of select="'U'"/>
								</xsl:when>							
								<xsl:when test="string(ER_NEXT_PLN_YR_RSP)">
									<xsl:value-of select="ER_NEXT_PLN_YR_RSP" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</ER_NEXT_PLN_YR_RSP>
						<ER_NEXT_PREM_AMT>
							<xsl:choose>
								<xsl:when test="string(ER_NEXT_PREM_AMT)">
									<xsl:value-of select="ER_NEXT_PREM_AMT" />
								</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</ER_NEXT_PREM_AMT>
						<ER_NEXT_PRM_FRQ_CD>
							<xsl:choose>
								<xsl:when test="string(ER_NEXT_PRM_FRQ_CD)">
									<xsl:value-of select="ER_NEXT_PRM_FRQ_CD" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</ER_NEXT_PRM_FRQ_CD>
						<ER_NXT_PRM_CHG_RSP>
							<xsl:choose>
								<xsl:when test="string(ER_NXT_PRM_CHG_RSP) and string(ER_NXT_PRM_CHG_RSP)= 'I'">
									<xsl:value-of select="'U'"/>
								</xsl:when>
								<xsl:when test="string(ER_NXT_PRM_CHG_RSP)">
									<xsl:value-of select="ER_NXT_PRM_CHG_RSP" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</ER_NXT_PRM_CHG_RSP>
						<ER_SEQ_NUM>
							<xsl:choose>
								<xsl:when test="string(ER_SEQ_NUM)">
									<xsl:value-of select="ER_SEQ_NUM" />
								</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</ER_SEQ_NUM>
						<FEIN_NUM>
							<xsl:choose>
								<xsl:when test="string(FEIN_NUM)">
									<xsl:value-of select="FEIN_NUM" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="'0'" />
								</xsl:otherwise>
							</xsl:choose>
						</FEIN_NUM>
						<INDV_SEQ_NUM>
							<xsl:choose>
								<xsl:when test="string(INDV_SEQ_NUM)">
									<xsl:value-of select="INDV_SEQ_NUM" />
								</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</INDV_SEQ_NUM>
						<PLAN_ENRL_IND>
							<xsl:choose>
								<xsl:when test="string(PLAN_ENRL_IND) and string(PLAN_ENRL_IND)= 'I'">
									<xsl:value-of select="'U'"/>
								</xsl:when>								
								<xsl:when test="string(PLAN_ENRL_IND)">
									<xsl:value-of select="PLAN_ENRL_IND" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</PLAN_ENRL_IND>
						<PLAN_ENRL_DT>
							<xsl:choose>
								<xsl:when test="string(PLAN_ENRL_DT)">
									<xsl:value-of select="PLAN_ENRL_DT" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="'9999-12-31'" />
								</xsl:otherwise>
							</xsl:choose>
						</PLAN_ENRL_DT>
						<PLCY_SEQ_NUM>
							<xsl:choose>
								<xsl:when test="string(PLCY_SEQ_NUM)">
									<xsl:value-of select="PLCY_SEQ_NUM" />
								</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</PLCY_SEQ_NUM>
						<PREM_AMT_CHG_DT>
							<xsl:choose>
								<xsl:when test="string(PREM_AMT_CHG_DT)">
									<xsl:value-of select="PREM_AMT_CHG_DT" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="'9999-12-31'" />
								</xsl:otherwise>
							</xsl:choose>
						</PREM_AMT_CHG_DT>
						<REC_CPLT_IND>
							<xsl:choose>
								<xsl:when test="string(REC_CPLT_IND)">
									<xsl:value-of select="REC_CPLT_IND" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</REC_CPLT_IND>
						<ST_EE_BNFT_PLN_IND>
							<xsl:choose>
								<xsl:when test="string(ST_EE_BNFT_PLN_IND) and string(ST_EE_BNFT_PLN_IND)= 'I'">
									<xsl:value-of select="'U'"/>
								</xsl:when>
								<xsl:when test="string(ST_EE_BNFT_PLN_IND)">
									<xsl:value-of select="ST_EE_BNFT_PLN_IND" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</ST_EE_BNFT_PLN_IND>
						<WAIT_PRBT_PRD_IND>
							<xsl:choose>
								<xsl:when test="string(WAIT_PRBT_PRD_IND) and string(WAIT_PRBT_PRD_IND)= 'I'">
									<xsl:value-of select="'U'"/>
								</xsl:when>
								<xsl:when test="string(WAIT_PRBT_PRD_IND)">
									<xsl:value-of select="WAIT_PRBT_PRD_IND" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</WAIT_PRBT_PRD_IND>
						<WAIT_PRB_PR_END_DT>
							<xsl:choose>
								<xsl:when test="string(WAIT_PRB_PR_END_DT)">
									<xsl:value-of select="WAIT_PRB_PR_END_DT" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="'9999-12-31'" />
								</xsl:otherwise>
							</xsl:choose>
						</WAIT_PRB_PR_END_DT>
						<ACS_EMPLOYER_MEDICAL_COVERAGE_CHILDREN DATA_EXIST="{ACS_EMPLOYER_MEDICAL_COVERAGE_CHILDREN/@DATA_EXIST}">
							<xsl:for-each select="ACS_EMPLOYER_MEDICAL_COVERAGE_CHILDREN/ACS_EMPLOYER_MEDICAL_COVERAGE_CHILD">
								<ACS_EMPLOYER_MEDICAL_COVERAGE_CHILD DATA_EXIST="{ACS_EMPLOYER_MEDICAL_COVERAGE_CHILD/@DATA_EXIST}">
									<ACS_MED_CR_SEQ_NUM>
										<xsl:value-of select="ACS_MED_CR_SEQ_NUM" />
									</ACS_MED_CR_SEQ_NUM>
									<ACS_CVG_IN_SEQ_NUM>
										<xsl:choose>
											<xsl:when test="string(ACS_CVG_IN_SEQ_NUM)">
												<xsl:value-of select="ACS_CVG_IN_SEQ_NUM" />
											</xsl:when>
											<xsl:otherwise>0</xsl:otherwise>
										</xsl:choose>
									</ACS_CVG_IN_SEQ_NUM>
								</ACS_EMPLOYER_MEDICAL_COVERAGE_CHILD>
							</xsl:for-each>
						</ACS_EMPLOYER_MEDICAL_COVERAGE_CHILDREN>
					</ACS_EMPLOYER_MEDICAL_COVERAGE>
				</xsl:for-each>
			</ACS_EMPLOYER_MEDICAL_COVERAGES>
            <LTC_FOR_APPLICATION_INDICATOR>
				<xsl:value-of select="LTC_FOR_APPLICATION_INDICATOR/LTC_FOR_APPLICATION_INDICATOR" />
			</LTC_FOR_APPLICATION_INDICATOR>
			<FFM_INDICATOR DATA_EXIST="FFM_INDICATOR/@DATA_EXIST">
				<FFM_INDICATOR>
					<xsl:value-of select="FFM_INDICATOR" />
				</FFM_INDICATOR>
			</FFM_INDICATOR>
			<FFM_APP_TRANSFER_HEADER>
				<FFM_APP_TRANSFER_HEADER DATA_EXIST="FFM_APP_TRANSFER_HEADER/@DATA_EXIST">
					<XFER_ID>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/XFER_ID" />
					</XFER_ID>
					<AGR_TERM_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/AGR_TERM_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/AGR_TERM_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</AGR_TERM_IND>
					<APLY_FNCL_ASST>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/APLY_FNCL_ASST)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/APLY_FNCL_ASST" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</APLY_FNCL_ASST>
					<APP_CRE_DT>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/APP_CRE_DT" />
					</APP_CRE_DT>
					<APP_ID>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/APP_ID" />
					</APP_ID>
					<APP_SIGN_DT>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/APP_SIGN_DT" />
					</APP_SIGN_DT>
					<APP_XFER_TMS>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/APP_XFER_TMS" />
					</APP_XFER_TMS>
					<CHG_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/CHG_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/CHG_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</CHG_IND>
					<COOP_ABSN_PRNT_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/COOP_ABSN_PRNT_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/COOP_ABSN_PRNT_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</COOP_ABSN_PRNT_IND>
					<COOP_AGCY_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/COOP_AGCY_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/COOP_AGCY_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</COOP_AGCY_IND>
					<ICAR_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/ICAR_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/ICAR_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</ICAR_IND>
					<INS_OFRS_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/INS_OFRS_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/INS_OFRS_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</INS_OFRS_IND>
					<MA_APPL_AWR_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/MA_APPL_AWR_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/MA_APPL_AWR_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</MA_APPL_AWR_IND>
					<MA_CHIP_ST_CD>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/MA_CHIP_ST_CD)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/MA_CHIP_ST_CD" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</MA_CHIP_ST_CD>
					<MA_DTER_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/MA_DTER_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/MA_DTER_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</MA_DTER_IND>
					<NON_PERJURY_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/NON_PERJURY_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/NON_PERJURY_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</NON_PERJURY_IND>
					<NUM_REFS_CT>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/NUM_REFS_CT" />
					</NUM_REFS_CT>
					<ORIG_SIGN_DT>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/ORIG_SIGN_DT" />
					</ORIG_SIGN_DT>
					<PEND_DPSN_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/PEND_DPSN_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/PEND_DPSN_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</PEND_DPSN_IND>
					<PLCY_AGR_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/PLCY_AGR_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/PLCY_AGR_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</PLCY_AGR_IND>
					<RCPT_ST_CD>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/RCPT_ST_CD)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/RCPT_ST_CD" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</RCPT_ST_CD>
					<TAX_RET_ACS_IND>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/TAX_RET_ACS_IND)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/TAX_RET_ACS_IND" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="'0'" />
							</xsl:otherwise>
						</xsl:choose>
					</TAX_RET_ACS_IND>
					<TAX_RET_ACS_NUM>
						<xsl:choose>
							<xsl:when test="string(FFM_APP_TRANSFER_HEADER/TAX_RET_ACS_NUM)">
								<xsl:value-of select="FFM_APP_TRANSFER_HEADER/TAX_RET_ACS_NUM" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="' '" />
							</xsl:otherwise>
						</xsl:choose>
					</TAX_RET_ACS_NUM>
					<UPDT_TMS>
						<xsl:value-of select="FFM_APP_TRANSFER_HEADER/UPDT_TMS" />
					</UPDT_TMS>
				</FFM_APP_TRANSFER_HEADER>
			</FFM_APP_TRANSFER_HEADER>
			<FFM_REFERRAL_HEADERS>
				<xsl:for-each select="FFM_REFERRAL_HEADERS/FFM_REFERRAL/FFM_REFERRAL_HEADERS/FFM_REFERRAL_HEADER">
					<FFM_REFERRAL_HEADER DATA_EXIST="FFM_REFERRAL_HEADER/@DATA_EXIST">
						<XFER_ID>
							<xsl:value-of select="XFER_ID" />
						</XFER_ID>
						<REF_ID>
							<xsl:value-of select="REF_ID" />
						</REF_ID>
						<APTC_ELG_IND>
							<xsl:value-of select="APTC_ELG_IND" />
						</APTC_ELG_IND>
						<CHIP_ELG_IND>
							<xsl:value-of select="CHIP_ELG_IND" />
						</CHIP_ELG_IND>
						<CSR_ELG_IND>
							<xsl:value-of select="CSR_ELG_IND" />
						</CSR_ELG_IND>
						<EMER_ELG_IND>
							<xsl:value-of select="EMER_ELG_IND" />
						</EMER_ELG_IND>
						<EVID_DOC_IND>
							<xsl:value-of select="EVID_DOC_IND" />
						</EVID_DOC_IND>
						<INDV_SEQ_NUM>
							<xsl:value-of select="INDV_SEQ_NUM" />
						</INDV_SEQ_NUM>
						<MAGI_ELG_IND>
							<xsl:value-of select="MAGI_ELG_IND" />
						</MAGI_ELG_IND>
						<NON_MAGI_ELG_IND>
							<xsl:value-of select="NON_MAGI_ELG_IND" />
						</NON_MAGI_ELG_IND>
						<RCPT_ACCT_XFER_CD>
							<xsl:choose>
								<xsl:when test="string(RCPT_ACCT_XFER_CD)">
									<xsl:value-of select="RCPT_ACCT_XFER_CD" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</RCPT_ACCT_XFER_CD>
						<RCPT_CHIP_CNTY_NAM>
							<xsl:value-of select="RCPT_CHIP_CNTY_NAM" />
						</RCPT_CHIP_CNTY_NAM>
						<RCPT_MA_CHIP_ST_CD>
							<xsl:choose>
								<xsl:when test="string(RCPT_MA_CHIP_ST_CD)">
									<xsl:value-of select="RCPT_MA_CHIP_ST_CD" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</RCPT_MA_CHIP_ST_CD>
						<REF_A_VFCN_STAT_CD>
							<xsl:choose>
								<xsl:when test="string(REF_A_VFCN_STAT_CD)">
									<xsl:value-of select="REF_A_VFCN_STAT_CD" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</REF_A_VFCN_STAT_CD>
						<REF_ACTV_RSN_CD>
							<xsl:choose>
								<xsl:when test="string(REF_ACTV_RSN_CD)">
									<xsl:value-of select="REF_ACTV_RSN_CD" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</REF_ACTV_RSN_CD>
						<REF_ACTV_STAT_TXT>
							<xsl:choose>
								<xsl:when test="string(REF_ACTV_STAT_TXT)">
									<xsl:value-of select="REF_ACTV_STAT_TXT" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="' '" />
								</xsl:otherwise>
							</xsl:choose>
						</REF_ACTV_STAT_TXT>
						<REF_TMS>
							<xsl:value-of select="REF_TMS" />
						</REF_TMS>
						<RFGE_MA_ELG_IND>
							<xsl:value-of select="RFGE_MA_ELG_IND" />
						</RFGE_MA_ELG_IND>
						<UPDT_TMS>
							<xsl:value-of select="UPDT_TMS" />
						</UPDT_TMS>
						<XCHG_ELG_IND>
							<xsl:value-of select="XCHG_ELG_IND" />
						</XCHG_ELG_IND>
					</FFM_REFERRAL_HEADER>
				</xsl:for-each>
			</FFM_REFERRAL_HEADERS>
			<FFM_APPLICATION_INDIVIDUALS>
				<xsl:for-each select="FFM_APPLICATION_INDIVIDUALS/FFM_APPLICATION/FFM_APPLICATION_INDIVIDUALS/FFM_APPLICATION_INDIVIDUAL">
					<FFM_APPLICATION_INDIVIDUAL>
						<INDV_SEQ_NUM>
							<xsl:value-of select="INDV_SEQ_NUM" />
						</INDV_SEQ_NUM>
						<PRSN_ID>
							<xsl:value-of select="PRSN_ID" />
						</PRSN_ID>
						<HSHL_ANUL_INCM_AMT>
							<xsl:value-of select="HSHL_ANUL_INCM_AMT" />
						</HSHL_ANUL_INCM_AMT>
						<HSHL_MO_INCM_AMT>
							<xsl:value-of select="HSHL_MO_INCM_AMT" />
						</HSHL_MO_INCM_AMT>
						<HSHL_SIZE_QTY>
							<xsl:value-of select="HSHL_SIZE_QTY" />
						</HSHL_SIZE_QTY>
					</FFM_APPLICATION_INDIVIDUAL>
				</xsl:for-each>
			</FFM_APPLICATION_INDIVIDUALS>
        </APPLICATION>
    </xsl:template>
</xsl:stylesheet>