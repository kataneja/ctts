package gov.wisconsin.admin.controller;

import java.util.ArrayList;
import java.util.List;

import gov.wisconsin.admin.business.ActivityBO;
import gov.wisconsin.admin.business.CategoryBO;
import gov.wisconsin.admin.business.HolidayBO;
import gov.wisconsin.admin.business.StaffBO;
import gov.wisconsin.admin.data.pojo.T024_Category_Cargo;
import gov.wisconsin.admin.data.pojo.T025_Activity_Cargo;
import gov.wisconsin.admin.data.pojo.T035_HolidayTime_Cargo;
import gov.wisconsin.admin.transport.response.CreateActivityResponse;
import gov.wisconsin.admin.data.pojo.T019_T023_Security_Profile_Response_Cargo;
import gov.wisconsin.admin.transport.response.CreateCategoryResponse;
import gov.wisconsin.admin.transport.response.CreateHolidayResponse;
import gov.wisconsin.admin.transport.response.GetAllActivitiesResponse;
import gov.wisconsin.admin.transport.response.GetAllCategoriesResponse;
import gov.wisconsin.admin.transport.response.GetAllHolidaysResponse;
import gov.wisconsin.admin.transport.response.GetStaffProfileResponse;
import gov.wisconsin.admin.transport.response.GetStaffSecurityProfileResponse;
import gov.wisconsin.admin.transport.response.UpdateActivityResponse;
import gov.wisconsin.admin.transport.response.UpdateCategoryResponse;
import gov.wisconsin.admin.transport.response.UpdateHolidayResponse;
import gov.wisconsin.framework.base.FwAbstractController;
import gov.wisconsin.framework.constant.FwConstants;
import gov.wisconsin.framework.exception.FwException;
import gov.wisconsin.framework.exception.FwWrappedException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(FwConstants.EMPTY_STRING)
public class AdminController extends FwAbstractController {
	
	@GetMapping(value = "/category", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<GetAllCategoriesResponse> getAllCategories(@ModelAttribute String authenticatedUsername, HttpServletRequest httpRequest, HttpSession httpSession) {
		GetAllCategoriesResponse apiResponse = new GetAllCategoriesResponse();
		
		try {
			apiResponse.setStatus(false);

			CategoryBO categoryBO = applicationContext.getBean(CategoryBO.class);
			apiResponse.setResultList(categoryBO.getAllCategories(authenticatedUsername));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}
	
	@PostMapping(value = "/category", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<CreateCategoryResponse> createCategory(@RequestBody T024_Category_Cargo apiRequest, @ModelAttribute String authenticatedUsername, HttpServletRequest httpRequest, HttpSession httpSession) {
		CreateCategoryResponse apiResponse = new CreateCategoryResponse();
		
		try {
			apiResponse.setStatus(false);
			
			CategoryBO categoryBO = applicationContext.getBean(CategoryBO.class);
			apiResponse.setCreatedCargo(categoryBO.createOrUpdateCategory(apiRequest));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}
	
	@PutMapping(value = "/category", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<UpdateCategoryResponse> updateCategory(@RequestBody T024_Category_Cargo apiRequest, @ModelAttribute String authenticatedUsername, HttpServletRequest httpRequest, HttpSession httpSession) {
		UpdateCategoryResponse apiResponse = new UpdateCategoryResponse();
		
		try {
			apiResponse.setStatus(false);

			CategoryBO categoryBO = applicationContext.getBean(CategoryBO.class);
			apiResponse.setUpdatedCargo(categoryBO.createOrUpdateCategory(apiRequest));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}

	@GetMapping(value = "/activity", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<GetAllActivitiesResponse> getAllActivities(@ModelAttribute String authenticatedUsername, HttpServletRequest httpRequest, HttpSession httpSession) {
		GetAllActivitiesResponse apiResponse = new GetAllActivitiesResponse();
		
		try {
			apiResponse.setStatus(false);

			ActivityBO activityBO = applicationContext.getBean(ActivityBO.class);
			apiResponse.setResultList(activityBO.getAllActivities(authenticatedUsername));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}
	
	@PostMapping(value = "/activity", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<CreateActivityResponse> createActivity(@RequestBody T025_Activity_Cargo apiRequest, @ModelAttribute String username, HttpServletRequest httpRequest, HttpSession httpSession) {
		CreateActivityResponse apiResponse = new CreateActivityResponse();
		
		try {
			apiResponse.setStatus(false);

			ActivityBO activityBO = applicationContext.getBean(ActivityBO.class);
			apiResponse.setCreatedCargo(activityBO.createOrUpdateActivity(apiRequest));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}
	
	@PutMapping(value = "/activity", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<UpdateActivityResponse> updateActivity(@RequestBody T025_Activity_Cargo apiRequest, @ModelAttribute String username, HttpServletRequest httpRequest, HttpSession httpSession) {
		UpdateActivityResponse apiResponse = new UpdateActivityResponse();
		
		try {
			apiResponse.setStatus(false);
			
			ActivityBO activityBO = applicationContext.getBean(ActivityBO.class);
			apiResponse.setUpdatedCargo(activityBO.createOrUpdateActivity(apiRequest));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}

	@GetMapping(value = "/holiday", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<GetAllHolidaysResponse> getAllHolidays(@ModelAttribute String username, HttpServletRequest httpRequest, HttpSession httpSession) {
		GetAllHolidaysResponse apiResponse = new GetAllHolidaysResponse();
		
		try {
			apiResponse.setStatus(false);

			HolidayBO holidayBO = applicationContext.getBean(HolidayBO.class);
			apiResponse.setResultList(holidayBO.getAllHolidays(username));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}

	@PostMapping(value = "/holiday", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<CreateHolidayResponse> createHoliday(@RequestBody T035_HolidayTime_Cargo apiRequest, @ModelAttribute String username, HttpServletRequest httpRequest, HttpSession httpSession) {
		CreateHolidayResponse apiResponse = new CreateHolidayResponse();
		
		try {
			apiResponse.setStatus(false);
			
			HolidayBO holidayBO = applicationContext.getBean(HolidayBO.class);
			apiResponse.setCreatedCargo(holidayBO.createOrUpdateHoliday(apiRequest));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}

	@PutMapping(value = "/holiday", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<UpdateHolidayResponse> updateHoliday(@RequestBody T035_HolidayTime_Cargo apiRequest, @ModelAttribute String username, HttpServletRequest httpRequest, HttpSession httpSession) {
		UpdateHolidayResponse apiResponse = new UpdateHolidayResponse();
		
		try {
			apiResponse.setStatus(false);
			
			HolidayBO holidayBO = applicationContext.getBean(HolidayBO.class);
			apiResponse.setUpdatedCargo(holidayBO.createOrUpdateHoliday(apiRequest));
			
			apiResponse.setStatus(true);
		} catch(FwException fe) {
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		
		return ResponseEntity.status(200).body(apiResponse);
	}
	
	@GetMapping(value ="/staffSecurityProfile", produces = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<GetStaffSecurityProfileResponse> getStaffProfile(@ModelAttribute("wams") String wams, HttpServletRequest httpRequest , HttpSession httpSession){
		GetStaffSecurityProfileResponse apiResponse = new GetStaffSecurityProfileResponse();
		try{
			apiResponse.setStatus(false);
			wams="e3004000000041212";
			StaffBO staffBO = applicationContext.getBean(StaffBO.class);
			//apiResponse.setResultList(staffBO.getStaffProfileList(wid));
			List resultList=new ArrayList<T019_T023_Security_Profile_Response_Cargo>();
			T019_T023_Security_Profile_Response_Cargo responseCargo= new T019_T023_Security_Profile_Response_Cargo();
			responseCargo.setPrfl_id("admin");
			responseCargo.setShowAdminPanel(true);
			responseCargo.setShowApproveTimesheet(false);
			responseCargo.setShowDashboard(false);
			responseCargo.setShowReports(true);
			responseCargo.setShowSubmitTimeoff(false);
			responseCargo.setShowSubmitTimesheet(false);
			responseCargo.setShowUserManagement(true);
			responseCargo.setAccess_cd("U");
			resultList.add(responseCargo);
			apiResponse.setResultList(resultList);
			apiResponse.setStatus(true);
		}catch(FwException fe){
			throw new FwWrappedException(this.getClass(), fe, httpRequest);
		}
		return ResponseEntity.status(200).body(apiResponse);
	}
}